//-----------------------------------------------------------------------------
// FILE:        GeoRegion.cs
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:   Copyright (c) 2005-2015 by Jeffrey Lill.  All rights reserved.
// DESCRIPTION: Abstract base class for geographical regions.

using System;

namespace LillTek.Common
{
    /// <summary>
    /// Describes common behaviors for geographical regions.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This is the base class for the <see cref="GeoRectangle" />, <see cref="GeoCircle" />,
    /// <see cref="GeoPolygon" />, and <see cref="GeoCompositeRegion" /> classes.  Each of these 
    /// are used to define region on the surface of a globe.
    /// </para>
    /// <para>
    /// Derived classes must implement the <see cref="Contains(GeoCoordinate)" /> method and must 
    /// support serialization and deserialization by via <see cref="object.ToString" />, and a constructor 
    /// with a string parameter.
    /// </para>
    /// <para>
    /// The serialized form of the region must consist of a single line of text 
    /// starting a string identifying the region type key followed by a colon and then a region 
    /// specific string format.  The static <see cref="Parse" /> method of this base class is can 
    /// be used to deserialize any of the known region types.
    /// </para>
    /// <note>
    /// The serialized format generated by each region class is pretty flexible.  The only
    /// restriction is that regions other than <see cref="GeoCompositeRegion" /> may use
    /// the pipe (<b>|</b>) character.
    /// </note>
    /// </remarks>
    public abstract class GeoRegion
    {
        //---------------------------------------------------------------------
        // Static members

        internal const string CircleRegionKey    = "C";
        internal const string PolygonRegionKey   = "P";
        internal const string RectangleRegionKey = "R";
        internal const string CompositeRegionKey = "CR";

        /// <summary>
        /// Parses the serialized form of a region and returns an instance.
        /// </summary>
        /// <param name="input">The input string.</param>
        /// <returns>The region instance.</returns>
        /// <exception cref="ArgumentException">Thrown if the input string is not valid.</exception>
        public static GeoRegion Parse(string input)
        {
            const string errorMsg = "Cannot deserialize region from [{0}].  Region key is missing or unknown.";

            string key;
            int pos;

            if (input == null)
                throw new ArgumentNullException("input");

            pos = input.IndexOf(':');
            if (pos == -1)
                throw new ArgumentException(string.Format(errorMsg, input));

            key = input.Substring(0, pos);
            switch (key.ToUpper())
            {
                case CircleRegionKey:       return new GeoCircle(input);
                case PolygonRegionKey:      return new GeoPolygon(input);
                case RectangleRegionKey:    return new GeoRectangle(input);
                case CompositeRegionKey:    return new GeoCompositeRegion(input);
                default:                    throw new ArgumentException(string.Format(errorMsg, input));
            }
        }

        //---------------------------------------------------------------------
        // Instance members

        /// <summary>
        /// Default constructor.
        /// </summary>
        public GeoRegion()
        {
        }

        /// <summary>
        /// Determines whether a point is within the region.
        /// </summary>
        /// <param name="point">The point being tested.</param>
        /// <returns><c>true</c> if the point is within the region.</returns>
        public abstract bool Contains(GeoCoordinate point);

        /// <summary>
        /// Returns the smallest rectangle that bounds the polygon.
        /// </summary>
        public GeoRectangle Bounds { get; protected set; }

        /// <summary>
        /// Determines whether a point is within the region.
        /// </summary>
        /// <param name="latitude">Latitude of the point.</param>
        /// <param name="longitude">Longitude of the point.</param>
        /// <returns><c>true</c> if the point is within the region.</returns>
        public bool Contains(double latitude, double longitude)
        {
            return Contains(new GeoCoordinate(latitude, longitude));
        }
    }
}
