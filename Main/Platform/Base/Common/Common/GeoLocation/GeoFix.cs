//-----------------------------------------------------------------------------
// FILE:        GeoFix.cs
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:   Copyright (c) 2005-2015 by Jeffrey Lill.  All rights reserved.
// DESCRIPTION: Point-of-time geographic position and other related information 
//              generated by GeoFixSource.

using System;

namespace LillTek.Common
{
    /// <summary>
    /// Point-of-time geographic position and other related information generated by <see cref="GeoFixSource" />.
    /// </summary>
    public class GeoFix
    {

        //---------------------------------------------------------------------
        // Static methods

        /// <summary>
        /// Parses the string passed into a <see cref="GeoFix" />.
        /// </summary>
        /// <param name="input">The input string or <c>null</c>.</param>
        /// <returns>The parsed <see cref="GeoFix" /> or <c>null</c> if the input string is <c>null</c> or empty.</returns>
        public static GeoFix Parse(string input)
        {
            if (string.IsNullOrWhiteSpace(input))
                return null;

            return new GeoFix(input);
        }

        //---------------------------------------------------------------------
        // Instance methods

        /// <summary>
        /// Default constructor.
        /// </summary>
        public GeoFix()
        {
            TimeUtc            = null;
            Technology         = GeoFixTechnology.Unknown;
            Latitude           = double.NaN;
            Longitude          = double.NaN;
            Altitude           = double.NaN;
            Course             = double.NaN;
            Speed              = double.NaN;
            HorizontalAccuracy = double.NaN;
            VerticalAccurancy  = double.NaN;
            NetworkStatus      = NetworkStatus.Unknown;
        }

        /// <summary>
        /// Parses a string into a position record.
        /// </summary>
        /// <param name="input">The input string in the same format as generated by <see cref="ToString()" />.</param>
        /// <exception cref="ArgumentNullException">Thrown if <paramref name="input" /> is <c>null</c>.</exception>
        /// <exception cref="FormatException">Thrown if the input string is not correctly formatted.</exception>
        public GeoFix(string input)
            : this()
        {
            if (input == null)
                throw new ArgumentNullException("input");

            var fields = input.Split(',');

            if (fields.Length < 3)
                throw new FormatException("Bad GeoFix record: at least [3] comma separated fields are expected.");

            try
            {
                if (string.IsNullOrWhiteSpace(fields[0]))
                    TimeUtc = null;
                else
                    TimeUtc = Serialize.Parse(fields[0], DateTime.MinValue);

                if (!string.IsNullOrWhiteSpace(fields[1]) && !string.IsNullOrWhiteSpace(fields[2]))
                {
                    Latitude  = double.Parse(fields[1]);
                    Longitude = double.Parse(fields[2]);
                }

                if (fields.Length == 3)
                    return;

                if (!string.IsNullOrWhiteSpace(fields[3]))
                    Altitude = double.Parse(fields[3]);

                if (fields.Length == 4)
                    return;

                if (!string.IsNullOrWhiteSpace(fields[4]))
                    Course = double.Parse(fields[4]);

                if (fields.Length == 5)
                    return;

                if (!string.IsNullOrWhiteSpace(fields[5]))
                    Speed = double.Parse(fields[5]);

                if (fields.Length == 6)
                    return;

                if (!string.IsNullOrWhiteSpace(fields[6]))
                    HorizontalAccuracy = double.Parse(fields[6]);

                if (fields.Length == 7)
                    return;

                if (!string.IsNullOrWhiteSpace(fields[7]))
                    VerticalAccurancy = double.Parse(fields[7]);

                if (fields.Length == 8)
                    return;

                if (!string.IsNullOrWhiteSpace(fields[8]))
                    Technology = Serialize.Parse<GeoFixTechnology>(fields[8], GeoFixTechnology.Unknown);

                if (fields.Length == 9)
                    return;

                if (!string.IsNullOrWhiteSpace(fields[9]))
                    NetworkStatus = Serialize.Parse<NetworkStatus>(fields[9], NetworkStatus.Unknown);
            }
            catch (Exception e)
            {
                throw new FormatException(string.Format("Bad GeoFix record: {0}", e.Message));
            }
        }

        /// <summary>
        /// Indentifies the technology used to obtain the location fix.
        /// </summary>
        public GeoFixTechnology Technology { get; set; }

        /// <summary>
        /// The network connection status at the time the 
        /// </summary>
        public NetworkStatus NetworkStatus { get; set; }

        /// <summary>
        /// Indicates whether some geographic position information is available.
        /// </summary>
        public bool HasData
        {
            get { return Latitude != double.NaN && Longitude != double.NaN; }
        }

        /// <summary>
        /// Time (UTC) of the position measurement or <c>null</c>.
        /// </summary>
        public DateTime? TimeUtc { get; set; }

        /// <summary>
        /// The current latitide in degrees or <see cref="Double.NaN" /> if unknown.
        /// </summary>
        public double Latitude { get; set; }

        /// <summary>
        /// The current longitude in degrees or <see cref="Double.NaN" /> if unknown.
        /// </summary>
        public double Longitude { get; set; }

        /// <summary>
        /// The current altitude in meters above mean sea level or <see cref="Double.NaN" /> if unknown.
        /// </summary>
        public double Altitude { get; set; }

        /// <summary>
        /// The current course in degrees relative to true north or <see cref="Double.NaN" /> if unknown.
        /// </summary>
        public double Course { get; set; }

        /// <summary>
        /// The current speed in meters per second or <see cref="Double.NaN" /> if unknown.
        /// </summary>
        public double Speed { get; set; }

        /// <summary>
        /// The horizontal position accuracy or <see cref="Double.NaN" /> if unknown.
        /// </summary>
        public double HorizontalAccuracy { get; set; }

        /// <summary>
        /// The vertical position accuracy or <see cref="Double.NaN" /> if unknown.
        /// </summary>
        public double VerticalAccurancy { get; set; }

        /// <summary>
        /// Serializes the position record into a string suitable for logging or transmitting.
        /// </summary>
        /// <returns>The serialized record.</returns>
        public override string ToString()
        {
            return string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                 TimeUtc.HasValue ? Serialize.ToString(TimeUtc.Value) : string.Empty,
                                 !double.IsNaN(Latitude) ? Latitude.ToString() : string.Empty,
                                 !double.IsNaN(Longitude) ? Longitude.ToString() : string.Empty,
                                 !double.IsNaN(Altitude) ? Altitude.ToString() : string.Empty,
                                 !double.IsNaN(Course) ? Course.ToString() : string.Empty,
                                 !double.IsNaN(Speed) ? Speed.ToString() : string.Empty,
                                 !double.IsNaN(HorizontalAccuracy) ? HorizontalAccuracy.ToString() : string.Empty,
                                 !double.IsNaN(VerticalAccurancy) ? VerticalAccurancy.ToString() : string.Empty,
                                 Technology != GeoFixTechnology.Unknown ? Technology.ToString() : string.Empty,
                                 NetworkStatus != NetworkStatus.Unknown ? NetworkStatus.ToString() : string.Empty);
        }

        /// <summary>
        /// Serializes the specified fields of the position record into a string suitable for logging or transmitting.
        /// </summary>
        /// <param name="fields">A <see cref="GeoFixField" /> bitmap describing the fields to be written.</param>
        /// <returns>The serialized record.</returns>
        public string ToString(GeoFixField fields)
        {
            return string.Format("{0},{1},{2},{3},{4},{5},{6},{7},{8},{9}",
                                 (fields & GeoFixField.TimeUtc) != 0 && TimeUtc.HasValue ? Serialize.ToString(TimeUtc.Value) : string.Empty,
                                 (fields & GeoFixField.Latitude) != 0 && !double.IsNaN(Latitude) ? Latitude.ToString() : string.Empty,
                                 (fields & GeoFixField.Longitude) != 0 && !double.IsNaN(Longitude) ? Longitude.ToString() : string.Empty,
                                 (fields & GeoFixField.Altitude) != 0 && !double.IsNaN(Altitude) ? Altitude.ToString() : string.Empty,
                                 (fields & GeoFixField.Course) != 0 && !double.IsNaN(Course) ? Course.ToString() : string.Empty,
                                 (fields & GeoFixField.Speed) != 0 && !double.IsNaN(Speed) ? Speed.ToString() : string.Empty,
                                 (fields & GeoFixField.HorizontalAccuracy) != 0 && !double.IsNaN(HorizontalAccuracy) ? HorizontalAccuracy.ToString() : string.Empty,
                                 (fields & GeoFixField.VerticalAccurancy) != 0 && !double.IsNaN(VerticalAccurancy) ? VerticalAccurancy.ToString() : string.Empty,
                                 (fields & GeoFixField.Technology) != 0 && Technology != GeoFixTechnology.Unknown ? Technology.ToString() : string.Empty,
                                 (fields & GeoFixField.NetworkStatus) != 0 && NetworkStatus != NetworkStatus.Unknown ? NetworkStatus.ToString() : string.Empty);
        }
    }
}
