//-----------------------------------------------------------------------------
// FILE:        LogAnalyzer.cs
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:   Copyright (c) 2005-2015 by Jeffrey Lill.  All rights reserved.
// DESCRIPTION: Analyzes web log records generated by WebHelper.GetRequestLogEntry
//              and WebHelper.GetRequestLogTag.

using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Net;
using System.Reflection;
using System.Text;
using System.Web;
using System.Web.Hosting;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using System.Xml;
using System.Xml.Linq;

using LillTek.Common;
using LillTek.Service;

namespace LillTek.Web
{
    /// <summary>
    /// Analyzes web log records generated by <see cref="WebHelper" />.<see cref="WebHelper.GetRequestLogEntry" />
    /// <see cref="WebHelper" />.<see cref="WebHelper.GetRequestLogTag" />.
    /// </summary>
    /// <remarks>
    /// <para>
    /// This class can be used to analyze captured web log entries.  The base class
    /// computes several statistics including <see cref="PageViews" />, <see cref="Visitors" />,
    /// <see cref="GoogleCrawl" />, <see cref="BingCrawl" />, <see cref="BaiduCrawl" />,
    /// <see cref="OtherCrawl" />, <see cref="GoogleSearch" />, <see cref="BingSearch" />,
    /// <see cref="BaiduSearch" />, and <see cref="OtherSearch" />.
    /// </para>
    /// <para>
    /// To use this class, simply construct an instance and call <see cref="Submit" />
    /// for every log entry you wish to analyze and then examine properties you are interested
    /// in when you're done.
    /// </para>
    /// <para>
    /// Applications and/or derived classes can extend the basic analysis functionality by
    /// enlisting in the <see cref="AnalyzeEvent" />.  This event wll be raised for every log
    /// entry processed via the <see cref="Submit" /> method.  Handlers can use this event
    /// to produce new statistics or even override default computations by setting
    /// <see cref="LogAnalyzerArgs" />.<see cref="LogAnalyzerArgs.Handled" /> to <c>true</c>.
    /// </para>
    /// <para>
    /// One of the key statistics generated by this class is the <see cref="PageViews" /> count.
    /// This is is the number of web pages (as opposed to other files such as images or CSS styles)
    /// viewed by users.  The analyzer uses the file extension (or lack thereof) in the request path
    /// to determine which log entries reference a web page and which do not.  The analyzer maintains
    /// an internal collection of file extensions it considers to belong to web pages:
    /// </para>
    /// <list type="bullet">
    ///     <item><b>&lt;empty&gt;</b></item>
    ///     <item><b>.asp</b></item>
    ///     <item><b>.aspx</b></item>
    ///     <item><b>.htm</b></item>
    ///     <item><b>.html</b></item>
    /// </list>
    /// <para>
    /// Applications can use the <see cref="AddPageExtension" /> and <see cref="ClearPageExtensions" />
    /// methods to customize this list.  Applications can also subscribe to the <see cref="AnalyzeEvent" />
    /// and set the <see cref="LogAnalyzerArgs.IsPageView" /> property to a non-<c>null</c> value to
    /// override the default page view determination for specific log entries.
    /// </para>
    /// </remarks>
    /// <threadsafety instance="false" />
    public class LogAnalyzer
    {
        private Dictionary<string, bool> uniqueVisitors = new Dictionary<string, bool>();
        private Dictionary<string, bool> pageExtensions = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);

        /// <summary>
        /// Constructor.
        /// </summary>
        public LogAnalyzer()
        {
            // Initalize the default extensions.

            AddPageExtension("");
            AddPageExtension(".asp");
            AddPageExtension(".aspx");
            AddPageExtension(".htm");
            AddPageExtension(".html");
        }

        /// <summary>
        /// Adds a file name extension to the internal set of extensions for files that
        /// will be considered to be page hits by the analyzer.
        /// </summary>
        /// <param name="pageExtension">The file extension, optionally including the leading period.</param>
        public void AddPageExtension(string pageExtension)
        {
            if (pageExtension.Length > 0 && pageExtension[0] != '.')
                pageExtension = "." + pageExtension;

            pageExtensions[pageExtension] = true;
        }

        /// <summary>
        /// Clears the internal page file extensions collection, removing all default extensions.
        /// </summary>
        public void ClearPageExtensions()
        {
            pageExtensions.Clear();
        }

        /// <summary>
        /// Raised for each log entry submitted to the instance.
        /// </summary>
        /// <remarks>
        /// <para>
        /// Applications and/or derived classes can extend the basic analysis functionality by
        /// enlisting in the <see cref="AnalyzeEvent" />.  This event wll be raised for every log
        /// entry processed via the <see cref="Submit" /> method.  Handlers can use this event
        /// to produce new statistics or even override default computations by setting
        /// <see cref="LogAnalyzerArgs" />.<see cref="LogAnalyzerArgs.Handled" /> to <c>true</c>.
        /// </para>
        /// </remarks>
        public event EventHandler<LogAnalyzerArgs> AnalyzeEvent;

        /// <summary>
        /// Number of page individual page views.
        /// </summary>
        /// <remarks>
        /// <para>
        /// The class looks at the virtual request path to determine whether a page is
        /// being accessed vs an image, CSS file, or other non-page item.  If the
        /// path has no file extension or onw of the following extensions then it
        /// will be counted as a page hit.
        /// </para>
        /// <list type="bullet">
        ///     <item>*.asp</item>
        ///     <item>*.aspx</item>
        ///     <item>*.htm</item>
        ///     <item>*.html</item>
        /// </list>
        /// </remarks>
        public int PageViews { get; set; }

        /// <summary>
        /// Number of unique visitors.
        /// </summary>
        /// <remarks>
        /// <para>
        /// A visitor is considered to be unique by the base implementation if its
        /// request includes a unique LillTek visitor cookie because it will overcount
        /// browsers that disable cookies.
        /// </para>
        /// </remarks>
        public int Visitors { get; set; }

        /// <summary>
        /// Number of pages crawled by Googlebot.
        /// </summary>
        public int GoogleCrawl { get; set; }

        /// <summary>
        /// Number of pages crawled by Bingbot.
        /// </summary>
        public int BingCrawl { get; set; }

        /// <summary>
        /// Number of pages crawled by Baidu.
        /// </summary>
        public int BaiduCrawl { get; set; }

        /// <summary>
        /// Number of pages crawled by other search engines.
        /// </summary>
        public int OtherCrawl { get; set; }

        /// <summary>
        /// Number of searches referred by Google.
        /// </summary>
        public int GoogleSearch { get; set; }

        /// <summary>
        /// Number of searches referred by Bing.
        /// </summary>
        public int BingSearch { get; set; }

        /// <summary>
        /// Number of searches referred by Baidu.
        /// </summary>
        public int BaiduSearch { get; set; }

        /// <summary>
        /// Number of searcges referred by other search engines.
        /// </summary>
        public int OtherSearch { get; set; }

        /// <summary>
        /// Number of POST requests to the site (a good indication how much actual interaction there is).
        /// </summary>
        public int Postbacks { get; set; }

        /// <summary>
        /// Submits a log tag and entry originally generated by <see cref="WebHelper.GetRequestLogTag" /> 
        /// and <see cref="WebHelper.GetRequestLogEntry" /> for analysis.
        /// </summary>
        /// <param name="visitorCookie">The unique visitor cookie or <c>null</c>.</param>
        /// <param name="logTag">The log tag.</param>
        /// <param name="logEntry">The log entry.</param>
        /// <remarks>
        /// <para>
        /// This method raises the <see cref="AnalyzeEvent" /> for each log entry submitted, providing
        /// a way for applications to completely customize how the event is processed.  Event handlers
        /// can set the <see cref="LogAnalyzerArgs.Handled" /> property to <c>true</c> to indicate that
        /// no further processing of the evend should be performed or leave this as <c>false</c> to
        /// allow processing to continue.
        /// </para>
        /// <para>
        /// After raising the event and if the handler indicates that processing should continue,
        /// the method will perform default processing to determine whether the logged entry refers
        /// to a page view, a unique, visitor or is a search engine related operation.
        /// </para>
        /// <para>
        /// The <paramref name="visitorCookie" /> is used to help determine whether the log entry
        /// should be counted as a unique visitor or not.  This may be passed as <c>null</c> in which
        /// case the method will attempt to extract the standard LillTek unique visitor cookie from
        /// the logged request.  <see cref="AnalyzeEvent" /> handles may override this beghavior by
        /// setting the <see cref="LogAnalyzerArgs.VisitorCookie" /> property in the event arguments
        /// before returning.
        /// </para>
        /// </remarks>
        public void Submit(string visitorCookie, string logTag, string logEntry)
        {
            try
            {
                var args = new LogAnalyzerArgs(visitorCookie, logTag, logEntry);

                if (AnalyzeEvent != null)
                {
                    AnalyzeEvent(this, args);

                    if (args.Handled)
                        return;
                }

                logTag = args.LogTag.ToLower();

                // Count page hits.

                if (logTag == "pageview")
                {
                    if (args.IsPageView.HasValue)
                    {
                        if (args.IsPageView.Value)
                            this.PageViews++;
                    }
                    else if (pageExtensions.ContainsKey(Path.GetExtension(args.Path)))
                    {
                        args.IsPageView = true;
                        this.PageViews++;
                    }
                    else
                        args.IsPageView = false;
                }
                else
                    args.IsPageView = false;

                // Update the unique visitor and postback counts for page views.

                if (args.IsPageView.Value)
                {
                    uniqueVisitors[GetVisitorKey(args)] = true;
                    this.Visitors = uniqueVisitors.Count;

                    if (args.Method == "POST")
                        this.Postbacks++;
                }

                // Count search crawlers.

                if (logTag.StartsWith("botview"))
                {
                    if (logTag.Contains("google"))
                        this.GoogleCrawl++;
                    else if (logTag.Contains("bing"))
                        this.BingCrawl++;
                    else if (logTag.Contains("baidu"))
                        this.BaiduCrawl++;
                    else
                        this.OtherCrawl++;
                }

                // Count search referrals.

                if (args.Referer != null)
                {
                    var referer = args.Referer.ToString().ToLower();

                    if (referer.Contains("google"))
                        this.GoogleSearch++;
                    else if (referer.Contains("bing"))
                        this.BingSearch++;
                    else if (referer.Contains("baidu"))
                        this.BaiduSearch++;
                    else
                    {
                        // I'm going to consider requests with as referer URI that includes
                        // a "q=" query parameter as a referral from another search engine.

                        try
                        {
                            var query = Helper.ParseUriQuery(args.Referer);

                            if (query.ContainsKey("q"))
                                this.OtherSearch++;
                        }
                        catch
                        {
                            // Ignorning
                        }
                    }
                }
            }
            catch (Exception e)
            {
                SysLog.LogException(e);
            }
        }

        /// <summary>
        /// Returns the key to use identify a unique visitor.
        /// </summary>
        /// <param name="args">The log arguments.</param>
        /// <returns>The key.</returns>
        private string GetVisitorKey(LogAnalyzerArgs args)
        {
            return args.VisitorCookie ?? "NULL";
        }
    }
}
