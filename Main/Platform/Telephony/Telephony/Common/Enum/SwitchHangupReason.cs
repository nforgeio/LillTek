//-----------------------------------------------------------------------------
// FILE:        SwitchHangupReason.cs
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:   Copyright (c) 2005-2015 by Jeffrey Lill.  All rights reserved.
// DESCRIPTION: Identifies the possible NeonSwitch call hangup reasons.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;

using FreeSWITCH;
using FreeSWITCH.Native;

using LillTek.Common;

namespace LillTek.Telephony.Common
{
    /// <summary>
    /// Identifies the possible NeonSwitch call hangup reasons.
    /// </summary>
    /// <remarks>
    /// These map directly to the underlying FreeSWITCH switch call reason codes and the documentation
    /// was taken from the <a href="http://wiki.freeswitch.org/wiki/Hangup_causes">FreeSWITCH wiki</a>.
    /// </remarks>
    public enum SwitchHangupReason
    {
        /// <summary>
        /// Unspecified. No other reason codes applicable.
        /// </summary>
        /// <remarks>
        /// This is usually given by the router when none of the other codes apply. This reason usually 
        /// occurs in the same type of situations that reason <see cref="UnallocatedNumber"/>, 
        /// <see cref="IncompatibleDestination" />, and <see cref="InvalidParameterValue" />. 
        /// </remarks>
        None = switch_call_cause_t.SWITCH_CAUSE_NONE,

        /// <summary>
        /// Unallocated or unassigned number.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the called party cannot be reached because, although the
        /// called party number is in a valid format, it is not currently allocated (assigned). 
        /// </remarks>
        UnallocatedNumber = switch_call_cause_t.SWITCH_CAUSE_UNALLOCATED_NUMBER,

        /// <summary>
        /// No route to specified transit network (national use).
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason has received a request 
        /// to route the call through a particular transit network, which it does not recognize. 
        /// The equipment sending this reason does not recognize the transit network either because 
        /// the transit network does not exist or because that particular transit network, while 
        /// it does exist, does not serve the equipment which is sending this reason. 
        /// </remarks>
        NoRouteTransitNet = switch_call_cause_t.SWITCH_CAUSE_NO_ROUTE_TRANSIT_NET,

        /// <summary>
        /// No route to destination.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the called party cannot be reached because the network through 
        /// which the call has been routed does not serve the destination desired. This reason is 
        /// supported on a network dependent basis. 
        /// </remarks>
        NoRouteDestination = switch_call_cause_t.SWITCH_CAUSE_NO_ROUTE_DESTINATION,

        /// <summary>
        /// Channel unacceptable.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the channel most recently identified is not acceptable to 
        /// the sending entity for use in this call. 
        /// </remarks>
        ChannelUnacceptable = switch_call_cause_t.SWITCH_CAUSE_CHANNEL_UNACCEPTABLE,

        /// <summary>
        /// Call was awarded and is being delivered in an established channel.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the user has been awarded the incoming call, and that the incoming 
        /// call is being connected to a channel already established to that user for similar calls 
        /// (e.g. packet-mode x.25 virtual calls).
        /// </remarks>
        CallAwardedDelivered = switch_call_cause_t.SWITCH_CAUSE_CALL_AWARDED_DELIVERED,

        /// <summary>
        /// Normal call hangup (clearing).
        /// </summary>
        /// <remarks>
        /// This reason indicates that the call is being cleared because one of the users involved in the 
        /// call has requested that the call be cleared. Under normal situations, the source of this 
        /// reason is not the network. 
        /// </remarks>
        NormalClearing = switch_call_cause_t.SWITCH_CAUSE_NORMAL_CLEARING,

        /// <summary>
        /// User busy.
        /// </summary>
        /// <remarks>
        /// This reason is used to indicate that the called party is unable to accept another call because 
        /// the user busy condition has been encountered. This reason value may be generated by the called
        /// user or by the network. In the case of user determined user busy it is noted that the user 
        /// equipment is compatible with the call. 
        /// </remarks>
        UserBusy = switch_call_cause_t.SWITCH_CAUSE_USER_BUSY,

        /// <summary>
        /// No user responsed.
        /// </summary>
        /// <remarks>
        /// This reason is used when a called party does not respond to a call establishment message with 
        /// either an alerting or connect indication within the prescribed period of time allocated. 
        /// </remarks>
        NoUserResponse = switch_call_cause_t.SWITCH_CAUSE_NO_USER_RESPONSE,

        /// <summary>
        /// No user answered.
        /// </summary>
        /// <remarks>
        /// This reason is used when the called party has been alerted but does not respond with a connect 
        /// indication within a prescribed period of time. Note - This reason is not necessarily generated 
        /// by Q.931 procedures but may be generated by internal network timers.
        /// </remarks>
        NoAnswer = switch_call_cause_t.SWITCH_CAUSE_NO_ANSWER,

        /// <summary>
        /// Subscriber is absent.
        /// </summary>
        /// <remarks>
        /// This reason value is used when a mobile station has logged off, radio contact is not obtained 
        /// with a mobile station or if a personal telecommunication user is temporarily not addressable 
        /// at any user-network interface. Sofia SIP will normally raise USER_NOT_REGISTERED in such situations. 
        /// </remarks>
        SubscriberAbsent = switch_call_cause_t.SWITCH_CAUSE_SUBSCRIBER_ABSENT,

        /// <summary>
        /// Call was rejected.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason does not wish to accept this call, 
        /// although it could have accepted the call because the equipment sending this reason is neither 
        /// busy nor incompatible. The network may also generate this reason, indicating that the call was 
        /// cleared due to a supplementary service constraint. The diagnostic field may contain additional 
        /// information about the supplementary service and reason for rejection. 
        /// </remarks>
        CallRejected = switch_call_cause_t.SWITCH_CAUSE_CALL_REJECTED,

        /// <summary>
        /// Number has been changed.
        /// </summary>
        /// <remarks>
        /// This reason is returned to a calling party when the called party number indicated by the calling
        /// party is no longer assigned, The new called party number may optionally be included in the 
        /// diagnostic field. If a network does not support this reason, <see cref="UnallocatedNumber" /> 
        /// shall be used. 
        /// </remarks>
        NumberChanged = switch_call_cause_t.SWITCH_CAUSE_NUMBER_CHANGED,

        /// <summary>
        /// The call should be redirected to a new number.
        /// </summary>
        /// <remarks>
        /// This reason is used by a general ISUP protocol mechanism that can be invoked by an exchange 
        /// that decides that the call should be set-up to a different called number. Such an exchange
        /// can invoke a redirection mechanism, by use of this reason value, to request a preceding 
        /// exchange involved in the call to route the call to the new number. 
        /// </remarks>
        RedirectionToNewDestination = switch_call_cause_t.SWITCH_CAUSE_REDIRECTION_TO_NEW_DESTINATION,

        /// <summary>
        /// Exchange routing error.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the destination indicated by the user cannot be reached, because
        /// an intermediate exchange has released the call due to reaching a limit in executing the hop
        /// counter procedure. This reason is generated by an intermediate node, which when decrementing 
        /// the hop counter value, gives the result 0. 
        /// </remarks>
        ExchangeRoutingError = switch_call_cause_t.SWITCH_CAUSE_EXCHANGE_ROUTING_ERROR,

        /// <summary>
        /// Destination is not functioning properly.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the destination indicated by the user cannot be reached because 
        /// the interface to the destination is not functioning correctly. The term "not functioning
        /// correctly" indicates that a signal message was unable to be delivered to the remote party; 
        /// e.g. a physical layer or data link layer failure at the remote party, or user equipment off-line. 
        /// </remarks>
        DestinationOutOfOrder = switch_call_cause_t.SWITCH_CAUSE_DESTINATION_OUT_OF_ORDER,

        /// <summary>
        /// Invalid called number.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the called party cannot be reached because the called party number
        /// is not in a valid format or is not complete. 
        /// </remarks>
        InvalidNumberFormat = switch_call_cause_t.SWITCH_CAUSE_INVALID_NUMBER_FORMAT,

        /// <summary>
        /// Facility rejected.
        /// </summary>
        /// <remarks>
        /// This reason is returned when a supplementary service requested by the user cannot be 
        /// provided by the network. 
        /// </remarks>
        FacilityRejected = switch_call_cause_t.SWITCH_CAUSE_FACILITY_REJECTED,

        /// <summary>
        /// Response to status inquery.
        /// </summary>
        /// <remarks>
        /// This reason is included in the STATUS message when the reason for generating the
        /// STATUS message was the prior receipt of a STATUS INQUIRY. 
        /// </remarks>
        ResponseToStatusInquery = switch_call_cause_t.SWITCH_CAUSE_RESPONSE_TO_STATUS_ENQUIRY,

        /// <summary>
        /// Normal unspecified hangup.
        /// </summary>
        /// <remarks>
        /// This reason is used to report a normal event only when no other reason in the normal 
        /// class applies.
        /// </remarks>
        NormalUnspecified = switch_call_cause_t.SWITCH_CAUSE_NORMAL_UNSPECIFIED,

        /// <summary>
        /// No circuit or channel available.
        /// </summary>
        /// <remarks>
        /// This reason indicates that there is no appropriate circuit/channel presently 
        /// available to handle the call. 
        /// </remarks>
        NormalCircuitCongestion = switch_call_cause_t.SWITCH_CAUSE_NORMAL_CIRCUIT_CONGESTION,

        /// <summary>
        /// Network is not functioning properly.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the network is not functioning correctly and that the 
        /// condition is likely to last a relatively long period of time e.g. immediately 
        /// re-attempting the call is not likely to be successful. 
        /// </remarks>
        NetworkOutOfOrder = switch_call_cause_t.SWITCH_CAUSE_NETWORK_OUT_OF_ORDER,

        /// <summary>
        /// Temporary failure.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the network is not functioning correctly and that the condition 
        /// is not likely to last a long period of time; e.g. the user may wish to try another call 
        /// attempt almost immediately.
        /// </remarks>
        NormalTemporaryFailure = switch_call_cause_t.SWITCH_CAUSE_NORMAL_TEMPORARY_FAILURE,

        /// <summary>
        /// Switching equipment congestion.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the switching equipment generating this reason is experiencing 
        /// a period of high traffic. 
        /// </remarks>
        SwitchCongestion = switch_call_cause_t.SWITCH_CAUSE_SWITCH_CONGESTION,

        /// <summary>
        /// Access information discarded.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the network could not deliver access information to the remote
        /// user as requested, i.e. user-to-user information, low layer compatibility, high layer 
        /// compatibility or sub-address as indicated in the diagnostic. It is noted that the 
        /// particular type of access information discarded is optionally included in the diagnostic. 
        /// </remarks>
        AccessInfoDiscarded = switch_call_cause_t.SWITCH_CAUSE_ACCESS_INFO_DISCARDED,

        /// <summary>
        /// Requested circuit or channel is not available.
        /// </summary>
        /// <remarks>
        /// This reason is returned when the other side of the interface cannot provide the circuit or
        /// channel indicated by the requesting entity. 
        /// </remarks>
        RequestedChannelNotAvailable = switch_call_cause_t.SWITCH_CAUSE_REQUESTED_CHAN_UNAVAIL,

        /// <summary>
        /// Call was pre-empted.
        /// </summary>
        PreEmpted = switch_call_cause_t.SWITCH_CAUSE_PRE_EMPTED,

        /// <summary>
        /// Requested facility is not subscribed.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the user has requested a supplementary service, which is 
        /// available, but the user is not authorized to use. 
        /// </remarks>
        FacilityNotSubscribed = switch_call_cause_t.SWITCH_CAUSE_FACILITY_NOT_SUBSCRIBED,

        /// <summary>
        /// Outgoing call is blocked.
        /// </summary>
        /// <remarks>
        /// This reason indicates that although the calling party is a member of the CUG for
        /// the outgoing CUG call, outgoing calls are not allowed for this member of the CUG.
        /// </remarks>
        OutgoingCallBarred = switch_call_cause_t.SWITCH_CAUSE_OUTGOING_CALL_BARRED,

        /// <summary>
        /// Incoming call was blocked.
        /// </summary>
        /// <remarks>
        /// This reason indicates that although the called party is a member of the CUG for
        /// the incoming CUG call, incoming calls are not allowed to this member of the CUG. 
        /// </remarks>
        IncomingCallBarred = switch_call_cause_t.SWITCH_CAUSE_INCOMING_CALL_BARRED,

        /// <summary>
        /// Bearer capability not authorized.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the user has requested a bearer capability that is 
        /// implemented by the equipment which generated this reason but the user is not 
        /// authorized to use. 
        /// </remarks>
        BearerCapabilityNotAuthorized = switch_call_cause_t.SWITCH_CAUSE_BEARERCAPABILITY_NOTAUTH,

        /// <summary>
        /// Bearer capability not available.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the user has requested a bearer capability which is implemented 
        /// by the equipment which generated this reason but which is not available at this time. 
        /// </remarks>
        BearerCapabilityNotAvailable = switch_call_cause_t.SWITCH_CAUSE_BEARERCAPABILITY_NOTAVAIL,

        /// <summary>
        /// Service or option is not available.
        /// </summary>
        /// <remarks>
        /// This reason is used to report a service or option not available event only when no other
        /// reason in the service or option not available class applies. 
        /// </remarks>
        ServiceNotAvailable = switch_call_cause_t.SWITCH_CAUSE_SERVICE_UNAVAILABLE,

        /// <summary>
        /// Channel type not implemented.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason does not support the 
        /// channel type requested 
        /// </remarks>
        ChannelNotImplemented = switch_call_cause_t.SWITCH_CAUSE_CHAN_NOT_IMPLEMENTED,

        /// <summary>
        /// Requested facility not implemented.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason does not support the 
        /// requested supplementary services. 
        /// </remarks>
        FacilityNotImplemented = switch_call_cause_t.SWITCH_CAUSE_FACILITY_NOT_IMPLEMENTED,

        /// <summary>
        /// Service not implemented.
        /// </summary>
        /// <remarks>
        /// This reason is used to report a service or option not implemented event only when
        /// no other reason in the service or option not implemented class applies. 
        /// </remarks>
        ServiceNotImplemented = switch_call_cause_t.SWITCH_CAUSE_SERVICE_NOT_IMPLEMENTED,

        /// <summary>
        /// Invalid call reference value.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason has received a message
        /// with a call reference which is not currently in use on the user-network interface. 
        /// </remarks>
        InvalidCallReference = switch_call_cause_t.SWITCH_CAUSE_INVALID_CALL_REFERENCE,

        /// <summary>
        /// Incompatible destination.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason has received a request
        /// to establish a call which has low layer compatibility, high layer compatibility or 
        /// other compatibility attributes (e.g. data rate) which cannot be accommodated. 
        /// </remarks>
        IncompatibleDestination = switch_call_cause_t.SWITCH_CAUSE_INCOMPATIBLE_DESTINATION,

        /// <summary>
        /// Message was invalid for an unspecified reason.
        /// </summary>
        /// <remarks>
        /// This reason is used to report an invalid message event only when no other reason
        /// in the invalid message class applies. 
        /// </remarks>
        InvalidMessageUnspecified = switch_call_cause_t.SWITCH_CAUSE_INVALID_MSG_UNSPECIFIED,

        /// <summary>
        /// Mandatory message parameter is messing.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason has received a message which is missing
        /// an information element which must be present in the message before that message can be processed. 
        /// </remarks>
        RequiredParameterMissing = switch_call_cause_t.SWITCH_CAUSE_MANDATORY_IE_MISSING,

        /// <summary>
        /// Message type non-existent or not implemented.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason has received a message with a message 
        /// type it does not recognize either because this is a message not defined of defined but not 
        /// implemented by the equipment sending this reason. 
        /// </remarks>
        MessageTypeNotSupported = switch_call_cause_t.SWITCH_CAUSE_MESSAGE_TYPE_NONEXIST,

        /// <summary>
        /// Message not compatible with call state or message type non-existent or not implemented.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason has received a message such
        /// that the procedures do not indicate that this is a permissible message to receive while 
        /// in the call state, or a STATUS message was received indicating an incompatible call state. 
        /// </remarks>
        WrongMessage = switch_call_cause_t.SWITCH_CAUSE_WRONG_MESSAGE,

        /// <summary>
        /// Parameter not known or not implemented.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason has received a message which 
        /// includes information element(s)/parameter(s) not recognized because the information 
        /// element(s)/parameter name(s) are not defined or are defined but not implemented by 
        /// the equipment sending the reason. This reason indicates that the information 
        /// element(s)/parameter(s) were discarded. However, the information element is not 
        /// required to be present in the message in order for the equipment sending the reason 
        /// to process the message. 
        /// </remarks>
        ParameterNotSupported = switch_call_cause_t.SWITCH_CAUSE_IE_NONEXIST,

        /// <summary>
        /// Invalid parameter value.
        /// </summary>
        /// <remarks>
        /// This reason indicates that the equipment sending this reason has received and information
        /// element which it has implemented; however, one or more fields in the I.E. are coded in 
        /// such a way which has not been implemented by the equipment sending this reason. 
        /// </remarks>
        InvalidParameterValue = switch_call_cause_t.SWITCH_CAUSE_INVALID_IE_CONTENTS,

        /// <summary>
        /// Message not compatible with the current call state.
        /// </summary>
        /// <remarks>
        /// This reason indicates that a message has been received which is incompatible with the call state. 
        /// </remarks>
        WrongCallState = switch_call_cause_t.SWITCH_CAUSE_WRONG_CALL_STATE,

        /// <summary>
        /// Recovery on timer expire.
        /// </summary>
        /// <remarks>
        /// $todo(jeff.lill): Figure out what this really means.
        /// </remarks>
        RecoveryOnTimerExpire = switch_call_cause_t.SWITCH_CAUSE_RECOVERY_ON_TIMER_EXPIRE,

        /// <summary>
        /// Required parameter error.
        /// </summary>
        /// <remarks>
        /// $todo(jeff.lill): Figure out what this really means.
        /// </remarks>
        RequiredParameterLengthError = switch_call_cause_t.SWITCH_CAUSE_MANDATORY_IE_LENGTH_ERROR,

        /// <summary>
        /// Protocol error.
        /// </summary>
        ProtocolError = switch_call_cause_t.SWITCH_CAUSE_PROTOCOL_ERROR,

        /// <summary>
        /// Internetworking issue.
        /// </summary>
        /// <remarks>
        /// $todo(jeff.lill): Figure out what this really means.
        /// </remarks>
        Internetworking = switch_call_cause_t.SWITCH_CAUSE_INTERWORKING,

        /// <summary>
        /// Success.
        /// </summary>
        /// <remarks>
        /// $todo(jeff.lill): Figure out what this really means.
        /// </remarks>
        Success = switch_call_cause_t.SWITCH_CAUSE_SUCCESS,

        /// <summary>
        /// Call originator hungup before the call was answered.
        /// </summary>
        OriginatorCancel = switch_call_cause_t.SWITCH_CAUSE_ORIGINATOR_CANCEL,

        /// <summary>
        /// Switch crash.
        /// </summary>
        Crash = switch_call_cause_t.SWITCH_CAUSE_CRASH,

        /// <summary>
        /// Switch is being shutdown.
        /// </summary>
        SystemShutdown = switch_call_cause_t.SWITCH_CAUSE_SYSTEM_SHUTDOWN,

        /// <summary>
        /// Another channel answered first.
        /// </summary>
        /// <remarks>
        /// This occurs when a call is being bridged to multiple destinations using
        /// multiple channels in parallel, and another channel answered the call.
        /// </remarks>
        LoseRace = switch_call_cause_t.SWITCH_CAUSE_LOSE_RACE,

        /// <summary>
        /// An application cleared the call.
        /// </summary>
        /// <remarks>
        /// A switch application issued an API command to hangup the call.
        /// </remarks>
        ManagerRequest = switch_call_cause_t.SWITCH_CAUSE_MANAGER_REQUEST,

        /// <summary>
        /// Blind transfer.
        /// </summary>
        BlindTransfer = switch_call_cause_t.SWITCH_CAUSE_BLIND_TRANSFER,

        /// <summary>
        /// Attended transfer.
        /// </summary>
        AttendedTransfer = switch_call_cause_t.SWITCH_CAUSE_ATTENDED_TRANSFER,

        /// <summary>
        /// Allotted timeout.
        /// </summary>
        /// <remarks>
        /// A switch application issued a schedule hangup action for this call and
        /// the call exceeded this time and was automatically cleared.
        /// </remarks>
        AllottedTimeout = switch_call_cause_t.SWITCH_CAUSE_ALLOTTED_TIMEOUT,

        /// <summary>
        /// User challenge.
        /// </summary>
        UserChallenge = switch_call_cause_t.SWITCH_CAUSE_USER_CHALLENGE,

        /// <summary>
        /// Media timeout.
        /// </summary>
        MediaTimeout = switch_call_cause_t.SWITCH_CAUSE_MEDIA_TIMEOUT,

        /// <summary>
        /// Call was intercepted.
        /// </summary>
        /// <remarks>
        /// This reason means the call was picked up by intercepting it from another 
        /// extension (i.e. dialing **ext_number from another extension). 
        /// </remarks>
        PickedOff = switch_call_cause_t.SWITCH_CAUSE_PICKED_OFF,

        /// <summary>
        /// User is not reqistered.
        /// </summary>
        /// <remarks>
        /// This means you tried to originate a call to a SIP user who forgot to register. 
        /// </remarks>
        UserNotRegistered = switch_call_cause_t.SWITCH_CAUSE_USER_NOT_REGISTERED,

        /// <summary>
        /// Progress timeout.
        /// </summary>
        ProgressTimeout = switch_call_cause_t.SWITCH_CAUSE_PROGRESS_TIMEOUT
    }
}
