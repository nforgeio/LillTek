//-----------------------------------------------------------------------------
// FILE:        LillTek.GeoTracker.Service.ini
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:   Copyright (c) 2005-2015 by Jeffrey Lill. All rights reserved.
// DESCRIPTION: LillTek GeoTracker Service configuration settings

//-----------------------------------------------------------------------------
// Global LillTek Settings

#section LillTek

    // The minimum interval at which LillTek background activities will be scheduled.

    BkTaskInterval = 15s

    // Specifies the recurring timer that forces periodic heap garbage collection.

    GCTimer = Interval,5m
      
#endsection

//-----------------------------------------------------------------------------
// Diagnostic Settings

#section Diagnostics

    -- TraceEnable[-] = 0:DEFAULT
    -- TraceEnable[-] = 1:LillTek.GeoTracker

    TimedLock.Timeout = 60s
    TimedLock.FullDiagnostics = $(IsDebug)
    TimedLock.LockableWarning = $(IsDebug)
    
    SysLog.CacheTime        = 1h
    SysLog.CacheInformation = no
    SysLog.CacheWarnings    = yes
    SysLog.CacheErrors      = yes
    SysLog.CacheExceptions  = yes
    SysLog.CacheSecurity    = no
    SysLog.CacheDebug       = no

#endsection

//-----------------------------------------------------------------------------
// GeoTracker Service Settings

#section LillTek.GeoTracker.Server

    // The external LillTek Messaging endpoint for the GeoTracker server cluster.
    // This is the endpoint thatGeoTrackerClient instances will use to communicate
    //  with the cluster.

    ServerEP = logical://LillTek/GeoTracker/Server

    // The internal LillTek Messaging endpoint for the root of the GeoTracker server cluster.
    // This is the endpoint that cluster servers will use to communicate with each other.

    ClusterEP = logical://LillTek/GeoTracker/Cluster

    // Describes the topology provider to be used to distribute traffic to
    // GeoTracker server instances within the cluster.  This provide must
    // implement TopologyCapability.Locality.

    ClusterTopology = LillTek.Messaging.DynamicHashedTopology:LillTek.Messaging.dll

    // Cluster topology specific parameters formatted as <b>name=value</b> pairs separated
    // by LF ('\n') characters.  Use the Config "{{" ... ""}}" setting syntax and place
    // each argument on a separate line in the config file.

    ClusterArgs = {{

    }}

    // The pluggable IGeoFixArchiver type to be used to archive GeoFixes received by the server.

    GeoFixArchiver = LillTek.GeoTracker.Server.NullGeoFixArchiver:LillTek.GeoTracker.Server.dll

    // Archiver specific parameters formatted as <b>name=value</b> pairs separated
    // by LF ('\n') characters.  Use the Config "{{" ... ""}}" setting syntax
    // and place each argument on a separate line in the config file.

    GeoFixArchiverArgs = {{

    }}

    // The length of time entity GeoFixes will be retained by GeoTracker.

    GetFixRetentionInterval = 1h
   
    // The interval at which old cached entity GeoFixes will be purged.

    GeoFixPurgeInterval = 1m

    // The maximum number of GeoFixes to be cached in memory for an entity.

    MaxEntityGeoFixes = 30

    // Used to decide when to attempt split an index block into sub-blocks when the number
    // of entities in a block is greater than or equal to this value.
    //
    // NOTE: IndexHighWatermarkLimit must be greater than or equal to >IndexLowWatermarkLimit.

    IndexHighWatermarkLimit = 1000

    // Used to decide when to attempt coalesce sub-blocks when the number
    // of entities in a block is greater than or equal to this value.
    //
    // NOTE: IndexHighWatermarkLimit must be greater than or equal to IndexLowWatermarkLimit.

    IndexLowWatermarkLimit = 750

    // Controls how deep into the index heirarchy group hash tables will be maintained by
    // the GeoTracker server.  Enabling these tables deeper in the heirarchy may result in better
    // performance for queries with group constraints but potentially at the cost of
    // severe memory utilizaton.

    IndexMaxGroupTableLevel = 2

    // The interval at which the server will attempt to rebalance the location index.

    IndexBalancingInterval = 5m

    // Controls whether IP geocoding services are to be made available by the GeoTracker server.

    IPGeocodeEnabled = yes

    // The URL where the current IP to location Geocoding database from http://maxmind.com
    // can be downloaded.  This must be a decompressed GeoIP City or GeoLite City database file.

    IPGeocodeSourceUri = http://www.lilltek.com/Config/GeoTracker/IP2City.encrypted.dat

    // The private RSA key used to decrypt the downloaded Geocoding database.  (defaults to
    // the value used to manually encrypt the file hosted on http://www.lilltek.com).

    IPGeocodeSourceRsaKey = <RSAKeyValue><Modulus>pCRHtqA872QYibpZif0Xo2xzNhTnXDsIwwTKdM1umBO7Dm+8NBcO23KJNTQQLGzOXtQ8rqMGfAEbXmk4+9pxxu7S5/shuKWV8MjUa1jeMvdfD3f1rh7xDZCoYtGPtMk6vjYM5jckJ4kaNqF7XT4zlEk6qM2am86xMMyThke7xBE=</Modulus><Exponent>AQAB</Exponent><P>3zMihEf+wPLMSonI76TEU3AFAlxFHFW+ZwZ4xmMClLBuQYXKpNbp4YJ6I5Bf2k6ToHtJPqUptZe2Aq93NXpw7Q==</P><Q>vENbvGlu3q/7OhfnScD7LKb+P6aQx1ok/ZLk+pCGkIp1e9dfkNOI278n9y4UQz65JFcuNezmk9J6aUoxPcaPNQ==</Q><DP>IgGHc8IIVVtotr6RZ7mh09iQWtC2EuAZd1bsFcXGAeNzmPYKbtzzm1EmzL5VbExmf5/pA+tkFG+94mDbd8Fk7Q==</DP><DQ>dvsvIA2WR2D7KsTupNs1IwxLRVj0yTj8hdHvqzfqA7Gt/F2qhTJbnV3bWUmi/rjGc+QxTV1ygFwWhzKfmkZCPQ==</DQ><InverseQ>a7E6CztwA2gDf5sSlrUOs95VrmmWISYa6PJOdqefF3+N/odlJ2bJaACjVDlQ7Edsnf2o6QGb0ImRTHW5Qx6kdQ==</InverseQ><D>WGQhKjuIFPI2NJTheumMPTk9obYIESbJRRvjWpr2H3cgmFmbZAG2wn4fXUM4InRFfdOVCgZIi6ac8m5/fUDZW4XUkisQJZaCp4pON25vEt79MXYr3D2sjeVEAVo8f1PFiATNvdSdkbrkWrdkK7alVIX9BfYIH/oZjh53PXoa0kE=</D></RSAKeyValue>

    // The interval at which server instances will poll for updates to the IP Geocode database,
    // Note that server will use the HTTP If-Modified-Since header for efficency since this
    // database is updated only once a month.

    IPGeocodeSourcePollInterval = 1d

    // The interval at which old GeoFixes, entities, and groups will be
    // swept up and discarded by the server.

    SweepInterval = 2.5m

    // The minimum interval at which background activities will be scheduled.

    BkInterval = 1s

#endsection

//-----------------------------------------------------------------------------
// LillTek Message Router Settings

#section MsgRouter

    // Name of the application hosting the router.

    AppName = LillTek.GeoTracker Service
    
    // Brief description of the application hosting the router.
    
    AppDescription = GeoTracker Service
    
    // The globally unique physical route for this router instance.
    
    RouterEP = physical://DETACHED/$(LillTek.DC.DefHubName)/$(Guid)
    
    // Specifies how the router will go about discovering other routers on the
    // network.  The possible values are MULTICAST (the default) and
    // UDPBROADCAST.
    //
    // If MULTICAST is specified then the router will broadcast and listen
    // for presence packets on the specified CloudAdaptor for the CloudEP
    // multicast endpoint.
    //
    // If UDPBROADCAST is specified then the router will use the LillTek
    // Broadcast Server to handle the transmission and reception presence packets
    // on networks that don't support multicast.  The BroadcastSettings
    // property can be used to configure the internal UdpBroadcastClient
    // used to manage these broadcasts.

    DiscoveryMode = MULTICAST
    
    // Multicast group endpoint used for router discovery.
    
    CloudEP = $(LillTek.DC.CloudEP)
    
    // Specifies the IP address of the network adapter to be used for transmitting
    // and receiving multicast discovery packets.
    
    CloudAdapter = ANY
    
    // Multicast (discovery) socket send buffer size.
    
    MulticastSendBufferSize = 64K
    
    // Multicast (discovery) socket receive buffer size.
    
    MulticastReceiveBufferSize = 64K
    
    // UDP Broadcast Client settings to be used when DiscoveryMode=UDPBROADCAST.

    #section BroadcastSettings

        // The network binding to be used for the UDP broadcast client instance.

        NetworkBinding = ANY

        // Specifies the size of the underlying socket's send and receive buffers.

        SocketBufferSize = 1M

        // The network bindings for all of the UDP broadcast servers in the cluster.
        
        // Server[-] = broadcast.lilltek.net:UDP-BROADCAST

        // The shared encryption key used to secure messages sent between UDP clients and servers.

        SharedKey = aes:NtSkj76eyCAsJE4TnTqmPOuKd5hDDWwSS7ccTfeKEL8=:S9Xc6skGFWtxoxBaoTxJlQ==

        // The maximum delta to be allowed between the timestamp of messages received from
        // UDP broadcast clients and servers and the current system time.
        //
        // Messages transmitted between clients and servers in the UDP broadcast cluster are
        // timestamped with the time they were sent (UTC) to avoid replay attacks.  This
        // setting controls which messages will be discarded for being having a timestamp
        // too far in the past or too far into the future.
        //
        // Ideally, this value would represent the maximum time a message could realistically
        // remain in transit on the network (a few seconds), but this setting also needs to
        // account for the possibility that the server system clocks may be out of sync.  So,
        // this value is a tradeoff between security and reliability.

        MessageTTL = 15m

        // An integer between 0..255 that specifies the broadcast group the UDP broadcast
        // client will join.

        BroadcastGroup = 0

        // The interval at which the server will wake up to handle background activities.

        BkTaskInterval = 1s

        // The interval between the automatic sending of REGISTER messages to the 
        // UDP servers (essentially the keep-alive interval).

        KeepAliveInterval = 30s

        /// The interval at which the client will requery the DNS to resolve any host names
        /// in the Server[#] bindings into IP addresses.
        
        ServerResolveInterval = 5m

    #endsection
    
    // Network endpoint to be used for sending and receiving messages using
    // the UDP transport.  Specify ANY as the IP address to bind to all network
    // adapters and 0 as the port to have the operating system assign the port
    // number.
    
    UdpEP = ANY:0
    
    // UDP socket send buffer size.
    
    UdpSendBufferSize = 64K
    
    // UDP socket receive buffer size.
    
    UdpReceiveBufferSize = 64K
    
    // Network endpoint to be used for sending and receiving messages using
    // the TCP transport.  Specify ANY as the IP address to bind to all network
    // adapters and 0 as the port to have the operating system assign the port
    // number.
    
    TcpEP = ANY:0
    
    // The maximum queue length for inbound socket connections that are waiting
    // to be accepted.  Note that some platforms limit this number (e.g. Windows/XP
    // limits this to 5).    
    
    TcpBacklog = 100
    
    // Enables the Nagle small TCP packet coalesing algorithm for the message
    // router's TCP sockets.
    
    TcpDelay = off
    
    // TCP socket send buffer size.
    
    TcpSendBufferSize = 64K
    
    // TCP socket receive buffer size.
    
    TcpReceiveBufferSize = 64K
    
    // The router's master background task timer interval.  This controls 
    // how often the router wakes up to perform any background activities
    // such as maintaining the routing tables.  This interval should be 
    // shorter than any of the other intervals defined below.
    
    BkInterval = 1s
    
    // Maximum time a TCP socket can remain idle before being closed automatically.
    
    MaxIdle = 5m
    
    // Enables peer-to-peer routing between this router and other P2P enabled
    // routers on the current subnet.  Disabling this will require that all
    // message traffic be routed through a Hub router.
    
    EnableP2P = yes
    
    // Interval at which the router will advertise its presence via a multicast transmission.
    
    AdvertiseTime = 1m
    
    // The maximum time a physical route will be maintained by this router
    // without being refreshed by a multicast advertise transmission.
    
    PhysicalRouteTTL = 3m
    
    // Default message time-to-live, or maximum router hops.
    
    DefMsgTTL = 5
    
    // The symmetric encryption algorithm to be used for securing messages.
    
    SharedKey = PLAINTEXT
    
    // The default amount of time the router session manager will
    // cache idempotent replies.
    
    SessionCacheTime = 2m
    
    // Default maximum session message retransmission count.
    
    SessionRetries = 3
    
    // Default session timeout.
    
    SessionTimeout = 10s
    
    // Maximum number of logical endpoints to be included in each
    // logical route advertise message exchanged between routers
    // while synchronizing their routing tables.
    
    MaxLogicalAdvertiseEPs = 256
    
    // Maximum time to wait for a message receipt message before
    // declaring a dead router and broadcasting this information
    // to the router subnet.  Set this to zero to disable dead
    // router detection.
    
    DeadRouterTTL = 2s
    
    // Maximum number of normal priority outbound messages to queue in a 
    // TCP channel before beginning to discard messages.
    
    TcpMsgQueueCountMax = 1000
    
    // Maximum bytes of serialized normal priority outbound messages to queue in a TCP channel
    // before beginning to discard messages.
    
    TcpMsgQueueSizeMax = 10M
    
    // Maximum number of normal priority outbound messages to queue in a UDP channel before beginning to
    // discard messages or 0 to disable the check.
    
    UdpMsgQueueCountMax = 1000
    
    // Maximum bytes of serialized normal priority outbound messages to queue in a UDP channel
    // before beginning to discard messages.
    
    UdpMsgQueueSizeMax = 10M
    
    // Specifies the set of logical endpoints where the router is to optimize routing for
    // locality, favoring routes to phyiscal endpoints that are closer to the router.
    
    // RouteLocal[-] = logical://*
        
    // This maps the abstract GeoTracker endpoints to their default logical endpoints.

    AbstractMap[abstract://LillTek/GeoTracker/Server] = logical://LillTek/GeoTracker/Server

#endsection
