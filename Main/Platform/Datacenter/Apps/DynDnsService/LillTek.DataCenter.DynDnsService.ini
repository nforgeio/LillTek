//-----------------------------------------------------------------------------
// FILE:        LillTek.Datacenter.DynDnsService.ini
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:   Copyright (c) 2005-2015 by Jeffrey Lill. All rights reserved.
// DESCRIPTION: LillTek Dynamic DNS Service configuration settings

//-----------------------------------------------------------------------------
// Global LillTek Settings

#section LillTek

    // The minimum interval at which LillTek background activities will be scheduled.

    BkTaskInterval = 15s

    // Specifies the recurring timer that forces periodic heap garbage collection.

    GCTimer = Interval,5m
      
#endsection

//-----------------------------------------------------------------------------
// Diagnostic Settings

#section Diagnostics

    -- TraceEnable[-] = 0:DEFAULT
    -- TraceEnable[-] = 255:Messaging.ClusterMember

    TimedLock.Timeout = 60s
    TimedLock.FullDiagnostics = $(IsDebug)
    TimedLock.LockableWarning = $(IsDebug)
    
    SysLog.CacheTime        = 1h
    SysLog.CacheInformation = no
    SysLog.CacheWarnings    = yes
    SysLog.CacheErrors      = yes
    SysLog.CacheExceptions  = yes
    SysLog.CacheSecurity    = no
    SysLog.CacheDebug       = no

#endsection

//-----------------------------------------------------------------------------
// Dynamic DNS Service Settings

#section LillTek.Datacenter.DynDNS

    // Specifies the network binding the DNS server should listen on.
    
    NetworkBinding = ANY:DNS

    // Specifies the NetworkBinding the DNS server 
    // should listen on to receive UDP host registration messages
    // from DynDnsClients.

    UdpBinding = ANY:DYNAMIC-DNS
    
    // Controls how the server is to be configured to obtain host
    // registrations from dynamic DNS clients.  The possible values
    // are UDP, CLUSTER, or BOTH.
    
    Mode = BOTH

    // Shared symmetric encryption key used to decrypt UDP registration messages
    // sent by DNS clients while in UDP or BOTH mode.  This key must match the shared
    // key configured for the client.  This defaults to the same reasonable default 
    // used by the DNS client class.

    SharedKey = aes:BcskocQ2W4aIGEemkPsy5dhAxuWllweKLVToK1NoYzg=:5UUVxRPml8L4WH82unR74A==

    // The maximum delta to be allowed between the timestamp of messages received from
    // UDP broadcast clients and servers and the current system time.
    //
    // Messages transmitted between clients and servers in the UDP broadcast cluster are
    // timestamped with the time they were sent (UTC) to avoid replay attacks.  This
    // setting controls which messages will be discarded for being having a timestamp
    // too far in the past or too far into the future.
    //
    // Ideally, this value would represent the maximum time a message could realistically
    // remain in transit on the network (a few seconds), but this setting also needs to
    // account for the possibility that the server system clocks may be out of sync.  So,
    // this value is a tradeoff between security and reliability.

    MessageTTL = 15m

    // Minimum interval for which background activities will be scheduled (when not
    // running in CLUSTER or BOTH mode).

    BkInterval = 1s

    // The maximum time a UDP host registration will remain active unless it
    // is renewed via another registration message from the dynamic DNS client.

    RegistrationTTL = 185s

    // Specifies the time-to-live setting to use when replying to
    // DNS queries.  This indicates how long the operating system
    // on the client side should cache the response.
    
    ResponseTTL = 5s
    
    // Indicates whether DNS host lookup failures should be logged
    // as warnings.
    
    LogFailures = no
    
    // The set of host entries to be registered with the DNS server.  These
    // entries are formatted as:
    //
    //  <host name> "," <ip/cname> [ "," <TTL> [ "," <host-mode> ] ]
    //
    // where host name is the DNS name being registered, ip/cname
    // specifies the IP address or CNAME reference to the host, TTL is the optional
    // time-to-live (TTL) to use for the entry in seconds, and host-mode is the optional 
    // host entry mode, one of ADDRESS, ADDRESSLIST, CNAME, or MX.
    //
    // A host mode of ADDRESS or ADDRESSLIST can only be specified for IP
    // addresses and CNAME can only be specified for CNAME entries.
    //
    // The TTL value defaults to 300 seconds (5 minutes) and the host-mode
    // defaults to ADDRESS.  The optional NAT field indicates that the dynamic
    // DNS server should register the source address of the UDP packet received
    // rather than the IP address specified in the host entry.  This effectively
    // allows public address of an upstream NAT or router to be mapped to a
    // DNS host name.

    NameServer[-] = dyndns-01.lilltek.net,75.101.135.101,1800,ADDRESS
    NameServer[-] = dyndns-02.lilltek.net,75.101.135.169,1800,ADDRESS
    
    // The set of host entries to be registered with the DNS server.  These
    // entries are formatted as:
    //
    //  <host name> "," <ip/cname> [ "," <TTL> [ "," <host-mode> ] ]
    //
    // where host name is the DNS name being registered, ip/cname
    // specifies the IP address or CNAME reference to the host, TTL is the optional
    // time-to-live (TTL) to use for the entry in seconds, and host-mode is the optional 
    // host entry mode, one of ADDRESS, ADDRESSLIST, CNAME, or MX.
    //
    // A host mode of ADDRESS or ADDRESSLIST can only be specified for IP
    // addresses and CNAME can only be specified for CNAME and MX entries.
    //
    // The TTL value defaults to 300 seconds (5 minutes) and the host-mode
    // defaults to ADDRESS for IP addresses or CNAME for CNAME references.

    // Host[-] = 

    // Specifies zero or more hosts for which the DNS server will proactively maintain the 
    // current address resolutions.  The format for each cache entry is:
    //
    // <host> [ "," <min-TTL> ]
    //
    // where host is the host name and min-TTL optionally specifies the
    // minimum time-to-live (in seconds) to use for cached resolutions (overriding the TTL
    // returned by the host name's origin DNS server).

    // AddressCache[-] = 

    // The interval between then time when a secondary nameserver gets a copy of the
    // zone and the next time it checks to see if it needs an update.

    SOA-Refresh = 2h

    // The interval a secondary nameserver waits before retrying to update the zone
    // from the primary nameserver after a failure.

    SOA-Retry = 30m

    // The interval a secondary nameserver can retain zone information
    // and still have it considered to be authoritative.

    SOA-Expire = 7d

    // The minimum for zone records.  This is ignored for responses returned
    // by the server itself.

    SOA-Minimum = 60m

    #section Cluster
    
        // The cluster's logical base endpoint.  Instance endpoints will be constructed
        // by appending a GUID segment to this and the cluster broadcast endpoint
        // will be generated by appending "/*".  This setting is required.
        
        ClusterBaseEP = abstract://LillTek/DataCenter/DynDNS
        
        // Specifies the startup mode for the instance.  This can be one of
        // the following values:
        // 
        //      NORMAL          Indicates that the cluster member should go through the normal 
        //                      master election cycle and eventually enter into the MASTER or SLAVE
        //                      state.
        //
        //      OBSERVER        Indicates that the cluster member should immediately enter the
        //                      OBSERVER state and remain there.  Cluster observer state information
        //                      is replicated across the cluster so other instances know
        //                      about these instances but observers will never be elected 
        //                      as the master.
        //
        //      MONITOR         Indicates that the cluster member should immediately enter the 
        //                      MONITOR state and remain there.  Monitors collect and maintain 
        //                      cluster status but do not actively participate in the cluster.  
        //                      No member status information about a monitor will be replicated
        //                      across the cluster.
        //
        //      PREFERSLAVE     Indicates that the cluster member prefers to be started as a 
        //                      cluster slave
        //
        //      PREFERMASTER    Indicates that the cluster member prefers to be started as the 
        //                      cluster master.  If a master is already running and it does not 
        //                      have this preference then a master election will be called.
        
        Mode = Normal

        // The interval at which the cluster master should broadcast cluster update
        // messages.  Default is 1m.
        
        MasterBroadcastInterval = 10s

        // The interval at which slaves send their status updates to the master.
        // Default is 1m.

        SlaveUpdateInterval = 10s

        // The time period cluster members will wait while collecting member status
        // broadcasts from peers before concluding a master election.  Default
        // is 5s.

        ElectionInterval = 5s

        // The number of times a cluster slave member should allow for missed
        // cluster status messages before calling for a master election.
        // Default is 3.

        MissingMasterCount = 2

        // The number of times the cluster master should allow for missed
        // slave status transmissions before removing the slave from the cluster 
        // state.  Default is 3.

        MissingSlaveCount = 2

        // The interval at which the cluster master instance should raise its
        // ClusterMember.MasterTask event so that derived classes can implement 
        // custom background processing behavior.  Default is 1s.

        MasterBkInterval = 1s

        // The interval at which the cluster slaves should raise their
        // ClusterMember.SlaveTask event so that derived classes
        // can implement custom background processing behavior.
        // Default is 1s.

        SlaveBkInterval = 1s

        // The background task polling interval.  This value should be less than
        // or equal to the minimum of MasterBroadcastInterval, MasterBkInterval, 
        // and SlaveBkInterval.  Default is 1s.

        BkInterval = 1s

    #endsection

#endsection


//-----------------------------------------------------------------------------
// LillTek Message Router Settings

#section MsgRouter

    // Name of the application hosting the router.

    AppName = LillTek.DynDNS Service
    
    // Brief description of the application hosting the router.
    
    AppDescription = Dynamic DNS
    
    // The globally unique physical route for this router instance.
    
    RouterEP = physical://DETACHED/$(LillTek.DC.DefHubName)/$(Guid)
    
    // Specifies how the router will go about discovering other routers on the
    // network.  The possible values are MULTICAST (the default) and
    // UDPBROADCAST.
    //
    // If MULTICAST is specified then the router will broadcast and listen
    // for presence packets on the specified CloudAdaptor for the CloudEP
    // multicast endpoint.
    //
    // If UDPBROADCAST is specified then the router will use the LillTek
    // Broadcast Server to handle the transmission and reception presence packets
    // on networks that don't support multicast.  The BroadcastSettings
    // property can be used to configure the internal UdpBroadcastClient
    // used to manage these broadcasts.

    DiscoveryMode = MULTICAST
    
    // Multicast group endpoint used for router discovery.
    
    CloudEP = $(LillTek.DC.CloudEP)
    
    // Specifies the IP address of the network adapter to be used for transmitting
    // and receiving multicast discovery packets.
    
    CloudAdapter = ANY
    
    // Multicast (discovery) socket send buffer size.
    
    MulticastSendBufferSize = 64K
    
    // Multicast (discovery) socket receive buffer size.
    
    MulticastReceiveBufferSize = 64K
    
    // UDP Broadcast Client settings to be used when DiscoveryMode=UDPBROADCAST.

    #section BroadcastSettings

        // The network binding to be used for the UDP broadcast client instance.

        NetworkBinding = ANY

        // Specifies the size of the underlying socket's send and receive buffers.

        SocketBufferSize = 1M

        // The network bindings for all of the UDP broadcast servers in the cluster.
        
        // Server[-] = broadcast.lilltek.net:UDP-BROADCAST

        // The shared encryption key used to secure messages sent between UDP clients and servers.

        SharedKey = aes:NtSkj76eyCAsJE4TnTqmPOuKd5hDDWwSS7ccTfeKEL8=:S9Xc6skGFWtxoxBaoTxJlQ==

        // The maximum delta to be allowed between the timestamp of messages received from
        // UDP broadcast clients and servers and the current system time.
        //
        // Messages transmitted between clients and servers in the UDP broadcast cluster are
        // timestamped with the time they were sent (UTC) to avoid replay attacks.  This
        // setting controls which messages will be discarded for being having a timestamp
        // too far in the past or too far into the future.
        //
        // Ideally, this value would represent the maximum time a message could realistically
        // remain in transit on the network (a few seconds), but this setting also needs to
        // account for the possibility that the server system clocks may be out of sync.  So,
        // this value is a tradeoff between security and reliability.

        MessageTTL = 15m

        // An integer between 0..255 that specifies the broadcast group the UDP broadcast
        // client will join.

        BroadcastGroup = 0

        // The interval at which the server will wake up to handle background activities.

        BkTaskInterval = 1s

        // The interval between the automatic sending of REGISTER messages to the 
        // UDP servers (essentially the keep-alive interval).

        KeepAliveInterval = 30s

        /// The interval at which the client will requery the DNS to resolve any host names
        /// in the Server[#] bindings into IP addresses.
        
        ServerResolveInterval = 5m

    #endsection
    
    // Network endpoint to be used for sending and receiving messages using
    // the UDP transport.  Specify ANY as the IP address to bind to all network
    // adapters and 0 as the port to have the operating system assign the port
    // number.
    
    UdpEP = ANY:0
    
    // UDP socket send buffer size.
    
    UdpSendBufferSize = 64K
    
    // UDP socket receive buffer size.
    
    UdpReceiveBufferSize = 64K
    
    // Network endpoint to be used for sending and receiving messages using
    // the TCP transport.  Specify ANY as the IP address to bind to all network
    // adapters and 0 as the port to have the operating system assign the port
    // number.
    
    TcpEP = ANY:0
    
    // The maximum queue length for inbound socket connections that are waiting
    // to be accepted.  Note that some platforms limit this number (e.g. Windows/XP
    // limits this to 5).    
    
    TcpBacklog = 100
    
    // Enables the Nagle small TCP packet coalesing algorithm for the message
    // router's TCP sockets.
    
    TcpDelay = off
    
    // TCP socket send buffer size.
    
    TcpSendBufferSize = 64K
    
    // TCP socket receive buffer size.
    
    TcpReceiveBufferSize = 64K
    
    // The router's master background task timer interval.  This controls 
    // how often the router wakes up to perform any background activities
    // such as maintaining the routing tables.  This interval should be 
    // shorter than any of the other intervals defined below.
    
    BkInterval = 1s
    
    // Maximum time a TCP socket can remain idle before being closed automatically.
    
    MaxIdle = 5m
    
    // Enables peer-to-peer routing between this router and other P2P enabled
    // routers on the current subnet.  Disabling this will require that all
    // message traffic be routed through a Hub router.
    
    EnableP2P = yes
    
    // Interval at which the router will advertise its presence via a multicast transmission.
    
    AdvertiseTime = 1m
    
    // The maximum time a physical route will be maintained by this router
    // without being refreshed by a multicast advertise transmission.
    
    PhysicalRouteTTL = 3m
    
    // Default message time-to-live, or maximum router hops.
    
    DefMsgTTL = 5
    
    // The symmetric encryption algorithm to be used for securing messages.
    
    SharedKey = PLAINTEXT
    
    // The default amount of time the router session manager will
    // cache idempotent replies.
    
    SessionCacheTime = 2m
    
    // Default maximum session message retransmission count.
    
    SessionRetries = 3
    
    // Default session timeout.
    
    SessionTimeout = 10s
    
    // Maximum number of logical endpoints to be included in each
    // logical route advertise message exchanged between routers
    // while synchronizing their routing tables.
    
    MaxLogicalAdvertiseEPs = 256
    
    // Maximum time to wait for a message receipt message before
    // declaring a dead router and broadcasting this information
    // to the router subnet.  Set this to zero to disable dead
    // router detection.
    
    DeadRouterTTL = 2s
    
    // Maximum number of normal priority outbound messages to queue in a 
    // TCP channel before beginning to discard messages.
    
    TcpMsgQueueCountMax = 1000
    
    // Maximum bytes of serialized normal priority outbound messages to queue in a TCP channel
    // before beginning to discard messages.
    
    TcpMsgQueueSizeMax = 10M
    
    // Maximum number of normal priority outbound messages to queue in a UDP channel before beginning to
    // discard messages or 0 to disable the check.
    
    UdpMsgQueueCountMax = 1000
    
    // Maximum bytes of serialized normal priority outbound messages to queue in a UDP channel
    // before beginning to discard messages.
    
    UdpMsgQueueSizeMax = 10M
    
    // Specifies the set of logical endpoints where the router is to optimize routing for
    // locality, favoring routes to phyiscal endpoints that are closer to the router.
    
    // RouteLocal[-] = logical://*
        
    // This maps the abstract Dynamic DNS endpoints to their default logical endpoints.

    AbstractMap[abstract://LillTek/DataCenter/DynDNS] = logical://LillTek/DataCenter/DynDNS

#endsection
