//-----------------------------------------------------------------------------
// FILE:        LillTek.Datacenter.AppStore.ini
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:   Copyright (c) 2005-2015 by Jeffrey Lill. All rights reserved.
// DESCRIPTION: LillTek AppStore Service configuration settings

//-----------------------------------------------------------------------------
// Global LillTek Settings

#section LillTek

    // The minimum interval at which LillTek background activities will be scheduled.

    BkTaskInterval = 15s

    // Specifies the recurring timer that forces periodic heap garbage collection.

    GCTimer = Interval,5m
      
#endsection

//-----------------------------------------------------------------------------
// Diagnostic Settings

#section Diagnostics

    -- TraceEnable[-] = 0:DEFAULT
    
    TimedLock.Timeout = 60s
    TimedLock.FullDiagnostics = $(IsDebug)
    TimedLock.LockableWarning = $(IsDebug)
    
    SysLog.CacheTime        = 1h
    SysLog.CacheInformation = no
    SysLog.CacheWarnings    = yes
    SysLog.CacheErrors      = yes
    SysLog.CacheExceptions  = yes
    SysLog.CacheSecurity    = no
    SysLog.CacheDebug       = no

#endsection

//-----------------------------------------------------------------------------
// Application Store Settings

#section LillTek.Datacenter.AppStore

    // Indicates whether the instance should operate as a primary
    // or caching store.  The possible values are PRIMARY and
    // CACHE.
    
    Mode = Primary
    
    // The path to the folder where the application packages are to be
    // stored.  This can be a path relative to the application's
    // installation folder or an absolute file system path.
    
    PackageFolder = $(AppPath)\Packages
    
    // Specifies the frequency that the application store scans its
    // package folder for changes to the set of packages.  This defaults
    // to a relatively long time since the application also enlists in
    // file system events so it will pick up most changes to the
    // set of packages very quickly.
    
    PackageScanInterval = 5m

    // This controls how often caching stores poll the primary for 
    // the current set of application packages.  Use 0 to
    // disable polling.

    PrimaryPollInterval = 15m

    // Indicates whether the primary store should broadcast a change
    // notification to the cluster whenever a change is made to the
    // set of application packages.  Caching stores use this message
    // as a signal to synchronize their caches.
    
    PrimaryBroadcast = yes

    // The interval at which engine background tasks are scheduled.
    
    BkTaskInterval = 1s
    
    #section Cluster
    
        // The cluster's logical base endpoint.  Instance endpoints will be constructed
        // by appending a GUID segment to this and the cluster broadcast endpoint
        // will be generated by appending "/*".  This setting is required.
        
        ClusterBaseEP = abstract://LillTek/DataCenter/AppStore
        
        // Specifies the startup mode for the instance.  This can be one of
        // the following values:
        // 
        //      NORMAL          Indicates that the cluster member should go through the normal 
        //                      master election cycle and eventually enter into the MASTER or SLAVE
        //                      state.
        //
        //      OBSERVER        Indicates that the cluster member should immediately enter the
        //                      OBSERVER state and remain there.  Cluster observer state information
        //                      is replicated across the cluster so other instances know
        //                      about these instances but observers will never be elected 
        //                      as the master.
        //
        //      MONITOR         Indicates that the cluster member should immediately enter the 
        //                      MONITOR state and remain there.  Monitors collect and maintain 
        //                      cluster status but do not actively participate in the cluster.  
        //                      No member status information about a monitor will be replicated
        //                      across the cluster.
        //
        //      PREFERSLAVE     Indicates that the cluster member prefers to be started as a 
        //                      cluster slave
        //
        //      PREFERMASTER    Indicates that the cluster member prefers to be started as the 
        //                      cluster master.  If a master is already running and it does not 
        //                      have this preference then a master election will be called.
        
        Mode = Normal

        // The interval at which the cluster master should broadcast cluster update
        // messages.  Default is 1m.
        
        MasterBroadcastInterval = 30s

        // The interval at which slaves send their status updates to the master.
        // Default is 1m.

        SlaveUpdateInterval = 30s

        // The time period cluster members will wait while collecting member status
        // broadcasts from peers before concluding a master election.  Default
        // is 5s.

        ElectionInterval = 10s

        // The number of times a cluster slave member should allow for missed
        // cluster status messages before calling for a master election.
        // Default is 3.

        MissingMasterCount = 2

        // The number of times the cluster master should allow for missed
        // slave status transmissions before removing the slave from the cluster 
        // state.  Default is 3.

        MissingSlaveCount = 2

        // The interval at which the cluster master instance should raise its
        // ClusterMember.MasterTask event so that derived classes can implement 
        // custom background processing behavior.  Default is 1s.

        MasterBkInterval = 1s

        // The interval at which the cluster slaves should raise their
        // ClusterMember.SlaveTask event so that derived classes
        // can implement custom background processing behavior.
        // Default is 1s.

        SlaveBkInterval = 1s

        // The background task polling interval.  This value should be less than
        // or equal to the minimum of MasterBroadcastInterval, MasterBkInterval, 
        // and SlaveBkInterval.  Default is 1s.

        BkInterval = 1s

    #endsection
    
#endsection

//-----------------------------------------------------------------------------
// LillTek Message Router Settings

#section MsgRouter

    // Name of the application hosting the router.

    AppName = LillTek.AppStore Service
    
    // Brief description of the application hosting the router.
    
    AppDescription = Application Package Store
    
    // The globally unique physical route for this router instance.
    
    RouterEP = physical://DETACHED/$(LillTek.DC.DefHubName)/$(Guid)
    
    // Specifies how the router will go about discovering other routers on the
    // network.  The possible values are MULTICAST (the default) and
    // UDPBROADCAST.
    //
    // If MULTICAST is specified then the router will broadcast and listen
    // for presence packets on the specified CloudAdaptor for the CloudEP
    // multicast endpoint.
    //
    // If UDPBROADCAST is specified then the router will use the LillTek
    // Broadcast Server to handle the transmission and reception presence packets
    // on networks that don't support multicast.  The BroadcastSettings
    // property can be used to configure the internal UdpBroadcastClient
    // used to manage these broadcasts.

    DiscoveryMode = MULTICAST
    
    // Multicast group endpoint used for router discovery.
    
    CloudEP = $(LillTek.DC.CloudEP)
    
    // Specifies the IP address of the network adapter to be used for transmitting
    // and receiving multicast discovery packets.
    
    CloudAdapter = ANY
    
    // Multicast (discovery) socket send buffer size.
    
    MulticastSendBufferSize = 64K
    
    // Multicast (discovery) socket receive buffer size.
    
    MulticastReceiveBufferSize = 64K
    
    // UDP Broadcast Client settings to be used when DiscoveryMode=UDPBROADCAST.

    #section BroadcastSettings

        // The network binding to be used for the UDP broadcast client instance.

        NetworkBinding = ANY

        // Specifies the size of the underlying socket's send and receive buffers.

        SocketBufferSize = 1M

        // The network bindings for all of the UDP broadcast servers in the cluster.
        
        // Server[-] = broadcast.lilltek.net:UDP-BROADCAST

        // The shared encryption key used to secure messages sent between UDP clients and servers.

        SharedKey = aes:NtSkj76eyCAsJE4TnTqmPOuKd5hDDWwSS7ccTfeKEL8=:S9Xc6skGFWtxoxBaoTxJlQ==

        // The maximum delta to be allowed between the timestamp of messages received from
        // UDP broadcast clients and servers and the current system time.
        //
        // Messages transmitted between clients and servers in the UDP broadcast cluster are
        // timestamped with the time they were sent (UTC) to avoid replay attacks.  This
        // setting controls which messages will be discarded for being having a timestamp
        // too far in the past or too far into the future.
        //
        // Ideally, this value would represent the maximum time a message could realistically
        // remain in transit on the network (a few seconds), but this setting also needs to
        // account for the possibility that the server system clocks may be out of sync.  So,
        // this value is a tradeoff between security and reliability.

        MessageTTL = 15m

        // An integer between 0..255 that specifies the broadcast group the UDP broadcast
        // client will join.

        BroadcastGroup = 0

        // The interval at which the server will wake up to handle background activities.

        BkTaskInterval = 1s

        // The interval between the automatic sending of REGISTER messages to the 
        // UDP servers (essentially the keep-alive interval).

        KeepAliveInterval = 30s

        /// The interval at which the client will requery the DNS to resolve any host names
        /// in the Server[#] bindings into IP addresses.
        
        ServerResolveInterval = 5m

    #endsection
    
    // Network endpoint to be used for sending and receiving messages using
    // the UDP transport.  Specify ANY as the IP address to bind to all network
    // adapters and 0 as the port to have the operating system assign the port
    // number.
    
    UdpEP = ANY:0
    
    // UDP socket send buffer size.
    
    UdpSendBufferSize = 64K
    
    // UDP socket receive buffer size.
    
    UdpReceiveBufferSize = 64K
    
    // Network endpoint to be used for sending and receiving messages using
    // the TCP transport.  Specify ANY as the IP address to bind to all network
    // adapters and 0 as the port to have the operating system assign the port
    // number.
    
    TcpEP = ANY:0
    
    // The maximum queue length for inbound socket connections that are waiting
    // to be accepted.  Note that some platforms limit this number (e.g. Windows/XP
    // limits this to 5).    
    
    TcpBacklog = 100
    
    // Enables the Nagle small TCP packet coalesing algorithm for the message
    // router's TCP sockets.
    
    TcpDelay = off
    
    // TCP socket send buffer size.
    
    TcpSendBufferSize = 64K
    
    // TCP socket receive buffer size.
    
    TcpReceiveBufferSize = 64K
    
    // The router's master background task timer interval.  This controls 
    // how often the router wakes up to perform any background activities
    // such as maintaining the routing tables.  This interval should be 
    // shorter than any of the other intervals defined below.
    
    BkInterval = 1s
    
    // Maximum time a TCP socket can remain idle before being closed automatically.
    
    MaxIdle = 5m
    
    // Enables peer-to-peer routing between this router and other P2P enabled
    // routers on the current subnet.  Disabling this will require that all
    // message traffic be routed through a Hub router.
    
    EnableP2P = yes
    
    // Interval at which the router will advertise its presence via a multicast transmission.
    
    AdvertiseTime = 1m
    
    // The maximum time a physical route will be maintained by this router
    // without being refreshed by a multicast advertise transmission.
    
    PhysicalRouteTTL = 3m
    
    // Default message time-to-live, or maximum router hops.
    
    DefMsgTTL = 5
    
    // The symmetric encryption algorithm to be used for securing messages.
    
    SharedKey = PLAINTEXT
    
    // The default amount of time the router session manager will
    // cache idempotent replies.
    
    SessionCacheTime = 2m
    
    // Default maximum session message retransmission count.
    
    SessionRetries = 3
    
    // Default session timeout.
    
    SessionTimeout = 10s
    
    // Maximum number of logical endpoints to be included in each
    // logical route advertise message exchanged between routers
    // while synchronizing their routing tables.
    
    MaxLogicalAdvertiseEPs = 256
    
    // Maximum time to wait for a message receipt message before
    // declaring a dead router and broadcasting this information
    // to the router subnet.  Set this to zero to disable dead
    // router detection.
    
    DeadRouterTTL = 2s
    
    // Maximum number of normal priority outbound messages to queue in a 
    // TCP channel before beginning to discard messages.
    
    TcpMsgQueueCountMax = 1000
    
    // Maximum bytes of serialized normal priority outbound messages to queue in a TCP channel
    // before beginning to discard messages.
    
    TcpMsgQueueSizeMax = 10M
    
    // Maximum number of normal priority outbound messages to queue in a UDP channel before beginning to
    // discard messages or 0 to disable the check.
    
    UdpMsgQueueCountMax = 1000
    
    // Maximum bytes of serialized normal priority outbound messages to queue in a UDP channel
    // before beginning to discard messages.
    
    UdpMsgQueueSizeMax = 10M
    
    // Specifies the set of logical endpoints where the router is to optimize routing for
    // locality, favoring routes to phyiscal endpoints that are closer to the router.
    
    // RouteLocal[-] = logical://*
    
    // This maps the abstract AppStore endpoints to their default logical endpoints.

    AbstractMap[abstract://LillTek/DataCenter/AppStore]   = logical://LillTek/DataCenter/AppStore
    AbstractMap[abstract://LillTek/DataCenter/AppStore/*] = logical://LillTek/DataCenter/AppStore/*

#endsection
