//-----------------------------------------------------------------------------
// FILE:        LillTek.Datacenter.AuthService.ini
// CONTRIBUTOR: Jeff Lill
// COPYRIGHT:   Copyright (c) 2005-2015 by Jeffrey Lill. All rights reserved.
// DESCRIPTION: LillTek Authentication Service configuration settings

//-----------------------------------------------------------------------------
// Global LillTek Settings

#section LillTek

    // The minimum interval at which LillTek background activities will be scheduled.

    BkTaskInterval = 15s

    // Specifies the recurring timer that forces periodic heap garbage collection.

    GCTimer = Interval,5m
      
#endsection

//-----------------------------------------------------------------------------
// Diagnostic Settings

#section Diagnostics

    -- TraceEnable[-] = 0:DEFAULT
    
    TimedLock.Timeout = 60s
    TimedLock.FullDiagnostics = $(IsDebug)
    TimedLock.LockableWarning = $(IsDebug)
    
    SysLog.CacheTime        = 1h
    SysLog.CacheInformation = no
    SysLog.CacheWarnings    = yes
    SysLog.CacheErrors      = yes
    SysLog.CacheExceptions  = yes
    SysLog.CacheSecurity    = no
    SysLog.CacheDebug       = no

#endsection

//-----------------------------------------------------------------------------
// Application Settings

// Set RealmMapType to one of FILE, CONFIG, or ODBC to select the proper configuration
// settings below.

#define RealmMapType FILE

#section LillTek.Datacenter.AuthService

    // Configure the service's realm map provider based on the value of RealmMapType

    #switch RealmMapType
    
        #case FILE

            // This configures the FileRealmMapProvider which periodically loads the realm/authentication 
            // mappings from a text file.  RealmMapArgs is the fully qualified path to this file.

            RealmMapProvider = LillTek.Datacenter.Server.FileRealmMapProvider:LillTek.Datacenter.Server.dll
            RealmMapArgs     = $(AppPath)/Realms.txt
            
        #case CONFIG
        
            // This configures the ConfigRealmMapProvider which loads the mappings from the 
            // LillTek.Datacenter.AuthService.RealmMap configuration setting array below.
            
            RealmMapProvider = LillTek.Datacenter.Server.ConfigRealmMapProvider:LillTek.Datacenter.Server.dll
            RealmMapArgs     = LillTek.Datacenter.AuthService.RealmMap
            
            // These are the config based realm map settings.  The format for each mapping is:
            //
            //      <realm>$$<extension typeref>$$<args>$$<ignored>
            //
            // The current setting simply map the empty realm to a FileAuthenticationExtension and the Accounts.txt file.
            
            RealmMap[-] = {{
            
                $$
				LillTek.Datacenter.Server.FileAuthenticationExtension:LillTek.Datacenter.Server.dll$$
                $path=(AppPath)/Accounts.txt;reload=yes$$    
            }}
        
        #case ODBC
        
            // This configures a the OdbcRealmMapProvider which queries a database for the realm/authentication 
            // mappings.  Note that the default settings will not work unless the database connection string
            // and query arguments are modified.
            
            RealmMapProvider = LillTek.Datacenter.Server.OdbcRealmMapProvider:LillTek.Datacenter.Server.dll
            RealmMapArgs     = {{
            
                Odbc=Driver={{SQL Server}};server=$(machinename);integrated security=SSPI$$
                select Realm,ProviderType,Args,Query from RealmMap
            }}            
        
    #endswitch
    
    // This specifies the RSA key pair used by the authentication service for encrypting
    // credentials and responses between .NET applications using the LillTek.Datacenter.Authenticator
    // client class.  The key XML can be inserted here directly or the a reference to a key
    // in a secure key container can be specified.  Secure key references are formatted as:
    //
    //      <keyname>:<provider name>
    //
    // as in:
    //
    //      MyAuthKey:Microsoft Base Cryptographic Provider v1.0
    
    RSAKeyPair = {{
    
        <RSAKeyValue>
            <Modulus>rJweYNfUOPRhr0ATty5eKdDaYxqO0AMiJJ7w9A25Z+6vye/gYfJ6/9rEyx/p8dW0id+r0uxhdL9HdFsftFIHX2jCz7jdql92VDsTuiwaHRw+3edsDCkpSG10WvLMqvH6Rxi0f/CMet/2ge1kAW8lzqSLoCRgShN7lmm9htD/lNU=</Modulus>
            <Exponent>AQAB</Exponent>
            <P>0+/kN6zPDyPtm8Fzv3TUHWnSoitu9DSwFru5Z0LbGta7cqyXnL7aISZ1o2jCf+15zacY+x7HG8RzIzNT67vsUQ==</P>
            <Q>0H8UdyhqtKhEJy32/dJGA2EoTPqhmGHLBI/aGlc6F3EfrzPXL9Y+Zc7iKN+jGX8rA6+Znq9d3Y8MrdAR64jzRQ==</Q>
            <DP>gKE4ghIAGdBUhhQDjE/77V4s2QBDdzQDK8kD3ghVsxRg8FiQLDIpcbVF8MfERKB9LLQeFUu4zMGOn+6nIIwOAQ==</DP>
            <DQ>Y5Ecc98QPh/RFCjGN+Zv2vNN7J0QCJZC/nW4ATZAnqs+J0wJamXUvIe0xzItUGLDZuo34Wj72W+T7Xlc5W8sRQ==</DQ>
            <InverseQ>OvHiJmpMN/8wruM8HLQeTgnqfEhTlNzH/09kup40Voym7ci7KM24AVP4ucTjS77hOlOJ7LFz1/nm3YsMGaTRDg==</InverseQ>
            <D>D2Of5bx4ZFeNegV5fIR6yrmfLuTIRM1yttcg3nF2zUhfjd6AH9txkewcTYvb3L7T6NLzS8vdaH5BTaNuMTJ7C6YcX3i6heerBIW3nwlfcM2gaGUAQE2WXQ3tKtLx0p4Tt0J7Z8fQH4mV6/6lqoAkkREOj/shyoMJffJB7fy148E=</D>
        </RSAKeyValue>        
    }}

    // The interval at which the realm map will be reloaded.

    RealmMapLoadInterval = 10m
    
    // The maximuim time an authentication result should be cached by the engine.
    // Use 0 to disable caching.  This overrides the MaxCacheTime time returned by an 
    // authentication source if this number is smaller.
    
    CacheTTL = 0

    // The maximum number of cached authentication success results.  Use 0 to disable
    // caching.
    
    MaxCacheSize = 100000

    // Specifies the maximum time a failed authentication attempt should be
    // cached.  Set this to zero  disable NAK caching.  Note that the actual 
    // time a failed attempt will be cached is the minimum of this value and 
    // LockoutThreshold and LockoutTime depending on whether the account has been
    // locked. 
    
    NakCacheTTL = 15m
    
    // The maximum number of cached authentication failure results.  This overrides the 
    // MaxCacheTime time returned by an authentication source if this number is smaller.  
    // Use 0 to disable NAK caching.
    
    MaxNakCacheSize = 100000
    
    // The interval between authentication success and failure cache flushes.
    
    CacheFlushInterval = 1m
    
    // The interval at which engine background tasks are scheduled.  These
    // tasks include periodically reloading the realm map and flushing the
    // authentication cache.
    
    BkTaskInterval = 5s
    
    // Indicates whether successful login attempts should be logged. 
    
    LogAuthSuccess = yes

    // Indicates whether failed login attempts should be logged.
    
    LogAuthFailure = yes
    
    // Indicates the default maximum number of failed authentication requests
    // to be allowed for a realm/account combinations for nonexistent realms
    // before the account will be locked out.  This parameter can be overridden
    // for specific realms.
    
    LockoutCount = 5
    
    // The default period of time that can elapse between failed authentication 
    // attempts where the failed attempts will not be counted against the
    // LockoutCount.  Set this to zero to disable account lockout for the realm.  
    // This parameter can be overridden for specific realms.
    
    LockoutThreshold = 1m
    
    // The default period of time an account will remain locked after being locked
    // out due to too many failed authentication attempts.  This parameter can be overridden
    // for specific realms.
    
    LockoutTime = 5m

    // Controls whether unencrypted authentication requests will generate a warning
    // log entry.  (Note that this feature does not currently support unencrypted
    // WCF authentication requests).

    WarnUnencrypted = no
    
    // Specifies the service behaviors as XML using the same format as implemented
    // for .NET configuration files.
    
    ServiceBehaviors = {{
    
        <behavior>
        
            <serviceSecurityAudit auditLogLocation="Default"
                                  suppressAuditFailure="true"
                                  serviceAuthorizationAuditLevel="None"
                                  messageAuthenticationAuditLevel="None" />
                                  
            <serviceThrottling maxConcurrentCalls="int.max"
                               maxConcurrentInstances="int.max"
                               maxConcurrentSessions="int.max" />
        </behavior>
    }}
    
    // The HttpEndpoint array specifies the HTTP GET/POST endpoints to be exposed
    // to JSON client applications.  Note that the "*" and "+" wildcards can
    // be used in place of the host name.  See the documentation for the .NET HttpListener
    // class for a description of these wildcards.  The HTTPS URI is commented out
    // since no SSL certificates are installed.
    
    HttpEndpoint[-] = http://$(machinename):80/AuthService/
    // HttpEndpoint[-] = https://$(machinename):443/AuthService/
    
    // These settings control how the service exposes WCF endpoints.  WsdlUri specifies
    // the URI where the service's WSDL is to be exposed.  The HTTPS URI is commented out
    // since no SSL certificates are installed.
    
    WcfEndpoint[-] = binding=BasicHTTP;uri=http://$(machinename):80/WCF-AuthService/Auth.svc
    WcfEndpoint[-] = binding=BasicHTTP;uri=http://$(machinename):80/WCF-AuthService/Auth.api
    // WcfEndpoint[-] = binding=BasicHTTP;uri=https://$(machinename):443/WCF-AuthService/Auth.svc
    // WcfEndpoint[-] = binding=BasicHTTP;uri=https://$(machinename):443/WCF-AuthService/Auth.api
    
    // Specifies whether the service's WSDL service description metadata should
    // be exposed.  Set the HTTP or HTTPS URI where the WSDL document should
    // be located.  Note that to actually retrieve the WSDL from the server,
    // you'll need to add the <b>"?wsdl"</b> query string in the browser.
    
    WsdlUri = http://$(machinename):80/WCF-AuthService/Auth.wsdl?wsdl

    // These setting configure the RADIUS service ports as well as the secret to be shared
    // with specific NAS devices.
    
    #section Radius[0]
    
        // The service UDP port binding.

        NetworkBinding = ANY:RADIUS
        
        // The default shared NAS secret to be used if the NAS IP address does
        // not match that of any of the devices.  Remove the DefaultSecret if
        // if only requests from known NAS devices are to be processed.
        
        DefaultSecret  = mysecret
        
        // Specifies the mapping of NAS IP address to shared secret.  Zero
        // or more devices can be specified.
        
        Device[-] = 127.0.0.1;device0-secret
        
        // Radius servers implement several additional configuration settings.
        // The default values work well in most situations.  
        
        // Byte size of the socket's send and receive buffers.

        SocketBuffer = 128K
        
        // Specifies the interval at which Network Access Service (NAS) DNS host
        // names will be requeried to resolve to the IP addresses used to 
        // identify the NAS device.
        
        DnsRefreshInterval = 15m
        
        // Specifies the interval at which the server will process background tasks.
        
        BkTaskInterval = 1m
        
        // Specifies how the realm and account components are to be parsed from 
        // a user name.  The possible values are EMAIL SLASH.  If EMAIL is
        // set then user names will be parsed as:
        //
        //      <account>@<realm>
        //
        // If SLASH is specified than user names will be parsed as:
        //
        //      <realm>/<account>
        //  or
        //      <realm>\<account>
        
        RealmFormat = EMAIL

    #endsection
    
    // See the note above.

    #section Radius[1]

        NetworkBinding = ANY:AAA
        DefaultSecret  = mysecret

    #endsection
    
    // This section controls whether the authentication service uses a
    // Dynamic DNS cluster to dynamically expose host/IP address mappings
    // to legacy applications via standard DNS queries.
    
    #section DynDNS
    
        // Set this to YES to enable dynamic DNS cluster integration.
    
        Enabled = no

        // Specifies the <see cref="NetworkBinding" /> the DNS client 
        // should use for sending UDP host registration messages to the 
        // DNS servers.

        NetworkBinding = ANY
        
        // Controls how the client registers hosts with the DNS server.  The possible values
        // are UDP or CLUSTER (BOTH is not is not allowed for DNS clients).

        Mode = CLUSTER

        // Shared symmetric encryption key used to decrypt UDP registration messages
        // sent by DNS clients while in UDP mode.  This key must match the shared key 
        // configured for the client.

        // SharedKey = 

        // Specifies the name server domain for the name server.  If this is
        // specified, the DNS client will periodically query DNS for the NS
        // records for the domain and then use the IP addresses to send UDP
        // host registration messages to the servers.
        //
        // This setting must be formatted as a network binding with a host name
        // and port, such as <b>LILLTEK.NET:DYNAMIC-DNS</b>.
        //
        // Note: One of Domain NameServer settings must be specified when when Mode=UDP.
        // If both settings are present, thenDomain will be used.

        // Domain = 

        // Specifies the network bindings for the DNS servers for the delivery
        // of UDP host registration messages.  These entries may include
        // IP addresses or host names, but note that host name lookups are
        // performed only once by the server, when it starts.
        //
        // Note: One of Domain NameServer settings must be specified when when Mode=UDP.
        // If both settings are present, thenDomain will be used.

        // NameServer[-] = 

        // Minimum interval for which background activities will be scheduled.

        BkInternal = 1s

        // Interval at which DNS NS queries will be performed to refresh the list of 
        // for the specified domain.

        DomainRefreshInterval = 15m

        // Interval at which UDP host registration messages will be sent to the
        // DNS servers when operating in UDP mode.

        UdpRegisterInterval = 1m
        
        // Add one or more host/IP address mappings here.  The host names
        // will typically match those specified in the HTTP or WCF URIs
        // configured above.  Each entry is formatted as:
        //
        //      Host[#] = <host name> "," <ip or cname> [ "," TTL [ "," <host-mode> [ ";" "NAT" ] ] ]
        //
        // Note that the $(ip-address) environment variable can be useful
        // for configuring the IP address of the active network adapter.
        
        // Host[-] = myhost.mydomain.com,$(ip-address)
        
        // This section specifies the Dynamic DNS cluster configuration.
        // The ClusterBaseEP setting is required.  Note that the other
        // settings must be consistent with all other cluster instances.
        
        #section Cluster
        
            // The cluster's logical base endpoint.  Instance endpoints will be constructed
            // by appending a GUID segment to this and the cluster broadcast endpoint
            // will be generated by appending "/*".  This setting is required.
            
            ClusterBaseEP = abstract://LillTek/DataCenter/DynDNS
            
            // Specifies the startup mode for the instance.  This can be one of
            // the following values:
            // 
            //      NORMAL          Indicates that the cluster member should go through the normal 
            //                      master election cycle and eventually enter into the MASTER or SLAVE
            //                      state.
            //
            //      OBSERVER        Indicates that the cluster member should immediately enter the
            //                      OBSERVER state and remain there.  Cluster observer state information
            //                      is replicated across the cluster so other instances know
            //                      about these instances but observers will never be elected 
            //                      as the master.
            //
            //      MONITOR         Indicates that the cluster member should immediately enter the 
            //                      MONITOR state and remain there.  Monitors collect and maintain 
            //                      cluster status but do not actively participate in the cluster.  
            //                      No member status information about a monitor will be replicated
            //                      across the cluster.
            //
            //      PREFERSLAVE     Indicates that the cluster member prefers to be started as a 
            //                      cluster slave
            //
            //      PREFERMASTER    Indicates that the cluster member prefers to be started as the 
            //                      cluster master.  If a master is already running and it does not 
            //                      have this preference then a master election will be called.
            
            Mode = Observer

            // The interval at which the cluster master should broadcast cluster update
            // messages.  Default is 1m.
            
            MasterBroadcastInterval = 10s

            // The interval at which slaves send their status updates to the master.
            // Default is 1m.

            SlaveUpdateInterval = 10s

            // The time period cluster members will wait while collecting member status
            // broadcasts from peers before concluding a master election.  Default
            // is 5s.

            ElectionInterval = 5s

            // The number of times a cluster slave member should allow for missed
            // cluster status messages before calling for a master election.
            // Default is 3.

            MissingMasterCount = 2

            // The number of times the cluster master should allow for missed
            // slave status transmissions before removing the slave from the cluster 
            // state.  Default is 3.

            MissingSlaveCount = 2

            // The interval at which the cluster master instance should raise its
            // ClusterMember.MasterTask event so that derived classes can implement 
            // custom background processing behavior.  Default is 1s.

            MasterBkInterval = 1s

            // The interval at which the cluster slaves should raise their
            // ClusterMember.SlaveTask event so that derived classes
            // can implement custom background processing behavior.
            // Default is 1s.

            SlaveBkInterval = 1s

            // The background task polling interval.  This value should be less than
            // or equal to the minimum of MasterBroadcastInterval, MasterBkInterval, 
            // and SlaveBkInterval.  Default is 1s.

            BkInterval = 1s
        
        #endsection
    
    #endsection

#endsection

//-----------------------------------------------------------------------------
// LillTek Message Router Settings

#section MsgRouter

    // Name of the application hosting the router.

    AppName = LillTek.Authentication Service
    
    // Brief description of the application hosting the router.
    
    AppDescription = Extensible authentication hub
    
    // The globally unique physical route for this router instance.
    
    RouterEP = physical://DETACHED/$(LillTek.DC.DefHubName)/$(Guid)
    
    // Specifies how the router will go about discovering other routers on the
    // network.  The possible values are MULTICAST (the default) and
    // UDPBROADCAST.
    //
    // If MULTICAST is specified then the router will broadcast and listen
    // for presence packets on the specified CloudAdaptor for the CloudEP
    // multicast endpoint.
    //
    // If UDPBROADCAST is specified then the router will use the LillTek
    // Broadcast Server to handle the transmission and reception presence packets
    // on networks that don't support multicast.  The BroadcastSettings
    // property can be used to configure the internal UdpBroadcastClient
    // used to manage these broadcasts.

    DiscoveryMode = MULTICAST
    
    // Multicast group endpoint used for router discovery.
    
    CloudEP = $(LillTek.DC.CloudEP)
    
    // Specifies the IP address of the network adapter to be used for transmitting
    // and receiving multicast discovery packets.
    
    CloudAdapter = ANY
    
    // Multicast (discovery) socket send buffer size.
    
    MulticastSendBufferSize = 64K
    
    // Multicast (discovery) socket receive buffer size.
    
    MulticastReceiveBufferSize = 64K
    
    // UDP Broadcast Client settings to be used when DiscoveryMode=UDPBROADCAST.

    #section BroadcastSettings

        // The network binding to be used for the UDP broadcast client instance.

        NetworkBinding = ANY

        // Specifies the size of the underlying socket's send and receive buffers.

        SocketBufferSize = 1M

        // The network bindings for all of the UDP broadcast servers in the cluster.
        
        // Server[-] = broadcast.lilltek.net:UDP-BROADCAST

        // The shared encryption key used to secure messages sent between UDP clients and servers.

        SharedKey = aes:NtSkj76eyCAsJE4TnTqmPOuKd5hDDWwSS7ccTfeKEL8=:S9Xc6skGFWtxoxBaoTxJlQ==

        // The maximum delta to be allowed between the timestamp of messages received from
        // UDP broadcast clients and servers and the current system time.
        //
        // Messages transmitted between clients and servers in the UDP broadcast cluster are
        // timestamped with the time they were sent (UTC) to avoid replay attacks.  This
        // setting controls which messages will be discarded for being having a timestamp
        // too far in the past or too far into the future.
        //
        // Ideally, this value would represent the maximum time a message could realistically
        // remain in transit on the network (a few seconds), but this setting also needs to
        // account for the possibility that the server system clocks may be out of sync.  So,
        // this value is a tradeoff between security and reliability.

        MessageTTL = 15m

        // An integer between 0..255 that specifies the broadcast group the UDP broadcast
        // client will join.

        BroadcastGroup = 0

        // The interval at which the server will wake up to handle background activities.

        BkTaskInterval = 1s

        // The interval between the automatic sending of REGISTER messages to the 
        // UDP servers (essentially the keep-alive interval).

        KeepAliveInterval = 30s

        /// The interval at which the client will requery the DNS to resolve any host names
        /// in the Server[#] bindings into IP addresses.
        
        ServerResolveInterval = 5m

    #endsection
    
    // Network endpoint to be used for sending and receiving messages using
    // the UDP transport.  Specify ANY as the IP address to bind to all network
    // adapters and 0 as the port to have the operating system assign the port
    // number.
    
    UdpEP = ANY:0
    
    // UDP socket send buffer size.
    
    UdpSendBufferSize = 64K
    
    // UDP socket receive buffer size.
    
    UdpReceiveBufferSize = 64K
    
    // Network endpoint to be used for sending and receiving messages using
    // the TCP transport.  Specify ANY as the IP address to bind to all network
    // adapters and 0 as the port to have the operating system assign the port
    // number.
    
    TcpEP = ANY:0
    
    // The maximum queue length for inbound socket connections that are waiting
    // to be accepted.  Note that some platforms limit this number (e.g. Windows/XP
    // limits this to 5).    
    
    TcpBacklog = 100
    
    // Enables the Nagle small TCP packet coalesing algorithm for the message
    // router's TCP sockets.
    
    TcpDelay = off
    
    // TCP socket send buffer size.
    
    TcpSendBufferSize = 64K
    
    // TCP socket receive buffer size.
    
    TcpReceiveBufferSize = 64K
    
    // The router's master background task timer interval.  This controls 
    // how often the router wakes up to perform any background activities
    // such as maintaining the routing tables.  This interval should be 
    // shorter than any of the other intervals defined below.
    
    BkInterval = 1s
    
    // Maximum time a TCP socket can remain idle before being closed automatically.
    
    MaxIdle = 5m
    
    // Enables peer-to-peer routing between this router and other P2P enabled
    // routers on the current subnet.  Disabling this will require that all
    // message traffic be routed through a Hub router.
    
    EnableP2P = yes
    
    // Interval at which the router will advertise its presence via a multicast transmission.
    
    AdvertiseTime = 1m
    
    // The maximum time a physical route will be maintained by this router
    // without being refreshed by a multicast advertise transmission.
    
    PhysicalRouteTTL = 3m
    
    // Default message time-to-live, or maximum router hops.
    
    DefMsgTTL = 5
    
    // The symmetric encryption algorithm to be used for securing messages.
    
    SharedKey = PLAINTEXT
    
    // The default amount of time the router session manager will
    // cache idempotent replies.
    
    SessionCacheTime = 2m
    
    // Default maximum session message retransmission count.
    
    SessionRetries = 3
    
    // Default session timeout.
    
    SessionTimeout = 10s
    
    // Maximum number of logical endpoints to be included in each
    // logical route advertise message exchanged between routers
    // while synchronizing their routing tables.
    
    MaxLogicalAdvertiseEPs = 256
    
    // Maximum time to wait for a message receipt message before
    // declaring a dead router and broadcasting this information
    // to the router subnet.  Set this to zero to disable dead
    // router detection.
    
    DeadRouterTTL = 2s
    
    // Maximum number of normal priority outbound messages to queue in a 
    // TCP channel before beginning to discard messages.
    
    TcpMsgQueueCountMax = 1000
    
    // Maximum bytes of serialized normal priority outbound messages to queue in a TCP channel
    // before beginning to discard messages.
    
    TcpMsgQueueSizeMax = 10M
    
    // Maximum number of normal priority outbound messages to queue in a UDP channel before beginning to
    // discard messages or 0 to disable the check.
    
    UdpMsgQueueCountMax = 1000
    
    // Maximum bytes of serialized normal priority outbound messages to queue in a UDP channel
    // before beginning to discard messages.
    
    UdpMsgQueueSizeMax = 10M
    
    // Specifies the set of logical endpoints where the router is to optimize routing for
    // locality, favoring routes to phyiscal endpoints that are closer to the router.
    
    // RouteLocal[-] = logical://*
    
    // This maps the abstract authentication service client and server endpoints
    // to their default logical endpoints.

    AbstractMap[abstract://LillTek/DataCenter/Auth/Client]  = logical://LillTek/DataCenter/Auth/Client
    AbstractMap[abstract://LillTek/DataCenter/Auth/Service] = logical://LillTek/DataCenter/Auth/Service
    AbstractMap[abstract://LillTek/DataCenter/Auth/*]       = logical://LillTek/DataCenter/Auth/*

#endsection
